{"version":3,"sources":["component/Login/Inputblock.js","socket.js","component/Login/Login.js","images/hamburger.png","component/Navigation/Navigation.js","component/Messages/Picture.js","images/like.png","images/liked.png","component/Messages/Messagebox.js","component/Messages/Messages.js","component/Friends/Friend.js","component/Mail/Mail.js","component/Friends/Request.js","component/Friends/Pending.js","component/Friends/Friends.js","App.js","reportWebVitals.js","index.js"],"names":["Inputblock","inputType","onChanges","value","className","htmlFor","type","name","id","onChange","socket","io","Login","user","route","errorMessage","setRoute","setUser","setErrorMessage","setIsSignedIn","onRouteChange","setCurrentMessage","setPrivateMessages","pastMessages","setConversation","setCurrentPublicMessage","setPrivatePublicMessage","setPastMessages","setPastPublicMessages","loadData","setFilteredMessages","filteredMessages","password","setPassword","email","event","target","prevUser","console","log","onClick","upperEmail","toUpperCase","fetch","method","headers","body","JSON","stringify","then","res","json","prevCurrentMessage","me","you","friends","requests","pendingrequests","catch","err","verifyLogin","test","length","verifyRegistration","Navigation","isSignedIn","changePublicStatus","useState","hideStatus","setHideStatus","hide","closeDropDown","status","src","Hamburger","alt","width","Picture","source","Messagebox","text","time","i","deletePost","deleteMail","addLike","currentUser","currentId","background","publicStatus","addFriend","likes","includes","substr","indexOf","Liked","Like","parse","Messages","currentMessage","currentPublicMessage","pastPublicMessages","picture","message","button","submit","position","hiddenStatus","setHiddenStatus","offset","useEffect","currentTime","emit","prevCurrentPublicMessage","filter","onSubmit","timeNow","Date","toLocaleString","timeZone","onInputChange","checkLiked","like","contains","newArr","every","database","changeHidden","goBack","cols","rows","placeholder","autoFocus","map","msg","Friend","friend","converse","unFriend","pendOrReq","Mail","privateMessage","setPrivateMessage","privateMessages","conversation","hiddenMailStatus","setHiddenMailStatus","senderemail","recipientemail","prevPrivateMessage","onSend","prevCurrentPrivateMessage","prevConversation","Request","rejectFriend","acceptFriend","Pending","Friends","Set","uniqueRequests","setUniqueRequests","uniquePending","setUniquePending","option","App","request","setPublicStatus","myEmail","on","data","off","location","info","infoUpdate","currentIndex","newFriend","prompt","alert","recipientEmail","publicState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.509fdf11.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Login.css';\r\nimport '../../colors2.css';\r\n\r\nconst Inputblock = ({inputType,onChanges,value}) => {\r\n    return (\r\n                \r\n        <div className=\"inputBlock\">\r\n            <label className=\"inputLabel\" htmlFor={inputType}>{inputType}</label>\r\n            <input \r\n                className=\"inputField\" \r\n                type= {inputType}\r\n                name={inputType}  \r\n                id={inputType}\r\n                value={value}\r\n                onChange = {onChanges}\r\n            />\r\n        </div>\r\n                \r\n    )\r\n}\r\n\r\nexport default Inputblock;","import {io} from \"socket.io-client\";\r\n\r\nconst URL = \"https://socially-distanced-server.herokuapp.com/\";\r\n// const URL = \"http://localhost:3005\"\r\nconst socket = io(URL);\r\n\r\nexport default socket;","import React from 'react';\r\nimport Inputblock from './Inputblock';\r\nimport './Login.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst Login = ({\r\n    user,route,errorMessage,\r\n    setRoute,setUser, setErrorMessage,\r\n    setIsSignedIn,onRouteChange, \r\n    setCurrentMessage, pastMessages,\r\n    setPrivateMessages, setCurrentPublicMessage,\r\n    setPrivatePublicMessage,setConversation,\r\n    setPastMessages,setPastPublicMessages,\r\n    setFilteredMessages,filteredMessages,\r\n    loadData,password,setPassword\r\n  }) => {\r\n    \r\n    const {name,email} = user;\r\n    \r\n    const onChanges= (event) =>{\r\n        switch (event.target.id){\r\n          case 'Name':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,name:event.target.value}})\r\n             \r\n            break;\r\n          case 'Email':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,email:event.target.value}})\r\n            break;\r\n          case 'Password':\r\n            setPassword(event.target.value)\r\n            break;\r\n          default:\r\n              console.log(event.target.value)\r\n        }\r\n      }\r\n  \r\n\r\n    const verifyLogin = (upperEmail) => {\r\n        fetch('https://socially-distanced-server.herokuapp.com/signin',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n              email:upperEmail,\r\n              password:password\r\n            })\r\n          })\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            if (res.email===upperEmail){\r\n              setUser(res)\r\n              setRoute('home')\r\n              setIsSignedIn(true)\r\n              setErrorMessage('')\r\n              setPassword('')\r\n              setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,name:res.name,email:upperEmail}})\r\n                \r\n              setConversation({me:res.email,you:''})\r\n              \r\n\r\n            }else{\r\n              setErrorMessage('Invalid Login Information')\r\n              setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n              setPassword('')\r\n            }\r\n            \r\n        })\r\n        .catch(err=>console.log(err))\r\n\r\n        loadData('friendmessageload',\r\n                  JSON.stringify({\r\n                    email:upperEmail,\r\n                    friends:user.friends\r\n                  }),\r\n                  setPastMessages\r\n                  )\r\n        loadData('publicmessageload',\r\n                  JSON.stringify({\r\n                      email:upperEmail,\r\n                      friends:user.friends\r\n                  }),\r\n                  setPastPublicMessages\r\n                  )\r\n\r\n        loadData('privatemessageload',\r\n                  JSON.stringify({\r\n                    email: upperEmail,\r\n                    friends:user.friends\r\n                  }),\r\n                  setPrivateMessages\r\n                  )    \r\n        \r\n      }\r\n    \r\n      const verifyRegistration = (upperEmail) => {\r\n        const emailPattern = /\\S+@\\S+\\.\\S+/\r\n            if (emailPattern.test(email) && password.length>=8){\r\n              fetch('https://socially-distanced-server.herokuapp.com/register',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                  name:user.name,\r\n                  email:upperEmail,\r\n                  password:password,\r\n                  friends:user.friends\r\n                })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(user=>{\r\n                if (user==='TAKEN'){\r\n                  setErrorMessage('That email address is already registered.')\r\n                }else{\r\n                  setUser(user)\r\n                  setRoute('home')\r\n                  setIsSignedIn(true)\r\n                  setErrorMessage('')\r\n                  setPassword('')\r\n                  setCurrentMessage((prevCurrentMessage)=>{\r\n                    return {...prevCurrentMessage,name:user.name,email:user.email}})\r\n                }\r\n                \r\n            \r\n                })\r\n                .catch(err=>console.log(err))\r\n\r\n                loadData('publicmessageload',\r\n                  JSON.stringify({\r\n                      email:upperEmail,\r\n                      friends:user.friends\r\n                  }),\r\n                  setPastPublicMessages\r\n                  )\r\n              }else if (password.length<8){\r\n                setErrorMessage('Password must be 8 characters long')\r\n              }else{\r\n                setErrorMessage('Enter a valid email address')\r\n              }\r\n      }\r\n\r\n      const onSubmit = () => {\r\n        const upperEmail = user.email.toUpperCase()\r\n        route==='Sign In'?verifyLogin(upperEmail):verifyRegistration(upperEmail);\r\n      }    \r\n      \r\n    return(        \r\n        <div>\r\n            <div className=\"container\">\r\n                <article className=\"formWindow\">\r\n                    <div className = \"formcontainer\">\r\n                        {(route===\"Register\"\r\n                            ?\r\n                            <div>\r\n                                <h1 className=\"legend\">Register</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Name\"} value={name} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Email\"} value = {email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <h1 className=\"legend\">Sign In</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Email\"} value={email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"legend\">\r\n                            <button type = \"submit\" className = \"button\" onClick = {onSubmit}>Submit</button>\r\n                        </div>\r\n                        <div className=\"legend\">\r\n                            {route==='Sign In'\r\n                            ?<p onClick = {() => onRouteChange('Register')}className=\"loginLink\">Register</p>\r\n                            :<p onClick = {() => onRouteChange('Sign In')} className=\"loginLink\">Sign In</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n    \r\n          </div>\r\n           \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Login;","export default __webpack_public_path__ + \"static/media/hamburger.745580e9.png\";","import React, {useState}from 'react';\r\nimport './Navigation.css';\r\nimport '../../colors2.css';\r\nimport Hamburger from \"../../images/hamburger.png\";\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn,\r\n                    route, user, \r\n                    changePublicStatus})=>{\r\n    const [hideStatus,setHideStatus] = useState('Hidden')\r\n\r\n    const hide = ()=>{\r\n        hideStatus==='Hidden'?setHideStatus(''):setHideStatus('Hidden')\r\n      \r\n    }\r\n\r\n    const closeDropDown = (route,status) =>{\r\n        if (hideStatus === ''){\r\n            setHideStatus('Hidden')\r\n        }\r\n        if (status===true||status===false){\r\n            changePublicStatus(route,status)\r\n        \r\n        }else{\r\n            onRouteChange(route)\r\n        }\r\n    }\r\n\r\n    if (isSignedIn){\r\n        return (\r\n            <div className = \"navroot\">\r\n                <div className = \"title\">Halpin Messaging App</div>\r\n                    <div>\r\n                        <button \r\n                            className = \"hideButton\" \r\n                            onClick = {hide}>\r\n                                <img src = {Hamburger} alt = \"=\" width=\"30rem\"></img>\r\n                        </button>\r\n                    </div>\r\n                <div className = {'mainNav'+hideStatus}> \r\n                    <button className = \"wideButton\" onClick = {hide}>Close</button>\r\n                        {/* <div className = \"groupContainer\"> */}\r\n                            {/* <p className = \"groupChat\">Group Chats</p> */}\r\n                            <div className = \"navButtonContainer \" >\r\n                                <p \r\n                                    onClick = {()=>closeDropDown('home',true)} \r\n                                    className = {\"navButtons home\"+ route}>\r\n                                        Public Chat\r\n                                </p>\r\n                                \r\n                                    \r\n                                </div>\r\n                                <div>\r\n                                <p \r\n                                    className = {\"navButtons friend\"+ route} \r\n                                    onClick = {()=>closeDropDown('friend',false)}>\r\n                                        Friends Chat\r\n                                </p>\r\n                            </div>\r\n                        {/* </div> */}\r\n                       \r\n                        <div>\r\n                            <p \r\n                                className = {\"navButtons private mail\"+ route} \r\n                                onClick = {() => closeDropDown('mail')}>\r\n                                    Private Message\r\n                            </p>\r\n                        </div>\r\n                       \r\n                        <div className = \"\">\r\n                            <p \r\n                                className = {\"navButtons friends\"+ route} \r\n                                onClick = {()=>closeDropDown('friends')}>\r\n                                    Contacts\r\n                                    {user?.requests?.length\r\n                                        ?<span className = \"requests\">{user.requests.length}</span>\r\n                                        :<></>}\r\n                            </p>\r\n                        </div>\r\n                        <nav className = \"\">\r\n                        <p \r\n                            onClick = {() => onRouteChange('Sign In')} \r\n                            className = {\"navButtons \"}>\r\n                                Sign Out\r\n                        </p>\r\n                    </nav>\r\n                    </div>\r\n                \r\n            </div>            \r\n        )\r\n    }else {\r\n        return (\r\n            <div >\r\n            </div>            \r\n            )   \r\n        }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './Picture.css';\r\n\r\nconst Picture = (source) => {\r\n    return (\r\n        <div >\r\n            <img className = \"picture\" alt = \"picture\" src = {source.source} ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Picture;","export default __webpack_public_path__ + \"static/media/like.1fe2cbbc.png\";","export default __webpack_public_path__ + \"static/media/liked.82a0b8ca.png\";","import React from 'react';\r\nimport \"./Message.css\";\r\nimport '../../colors2.css';\r\nimport Picture from './Picture';\r\nimport Like from '../../images/like.png';\r\nimport Liked from '../../images/liked.png';\r\n\r\nconst Messagebox = ({ route,text, \r\n                    email, time, i, \r\n                    deletePost,deleteMail, \r\n                    addLike, currentUser,\r\n                    currentId,filteredMessages,\r\n                    background,publicStatus,\r\n                    addFriend, likes}) => {\r\n   \r\n    return (\r\n        <div className = \"box\">\r\n            <div className = \"smallbox\">\r\n               <div className = {\"messageArea \" +background}>\r\n                    <div className = \"text\">\r\n                        <div className = \"textmessage\">\r\n                            {text.includes('#img#')\r\n                                ? <Picture source = {text.substr(5,text.length-1)}/>\r\n                                :<p>{text}</p>}\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                    \r\n                </div>\r\n                \r\n                <div className = {\"user \" + background}>                    \r\n                    <p onClick={()=>addFriend(email)}>{email.toUpperCase().substr(0,email.indexOf('@'))}</p>\r\n                    <p className='date'>{time}</p>\r\n                </div>\r\n               \r\n                <div className={\"likes \"}>\r\n                        {route === 'home'||route==='friend'\r\n                            ?<button className = \"likeButton\" onClick = {()=>addLike(i,currentId)}>\r\n                                {likes?JSON.stringify(likes).includes(currentUser)\r\n                                        ?<img src = {Liked} alt=\"Unlike\" width=\"20rem\"></img>\r\n                                        :<img src = {Like} alt=\"like\" width = \"20rem\"></img>\r\n                                        :<img src = {Like} alt=\"like\" width = \"20rem\"></img>}\r\n                            </button>\r\n                            \r\n                            :<></>}\r\n                    <div className = \"likedelete\">                    \r\n                        {route === 'home'||route==='friend'\r\n                            ?likes\r\n                                ?(<div className = \"liketext\">\r\n                                    {likes.length>=4\r\n                                        ?`${likes.length} Likes`\r\n                                        :(likes.length>1\r\n                                            ?(likes.length>2\r\n                                                ?JSON.parse(likes[0]).name+', '+JSON.parse(likes[1]).name+', and '+JSON.parse(likes[2]).name+' like this post'\r\n                                                :JSON.parse(likes[0]).name+' and '+JSON.parse(likes[1]).name+' like this post')\r\n                                            :(likes.length?JSON.parse(likes).name+' likes this post':''))}\r\n                                </div>\r\n                                 ):<></>\r\n                            :<></>\r\n                        }\r\n                        <div className = \"deleteContainer\">\r\n                            {route === \"home\"||route==='friend'\r\n                                ?<div>{filteredMessages[i].email===currentUser\r\n                                    ?<>\r\n                                    {/* <div className = \"deleteBackground\"> */}\r\n                                        <button \r\n                                            className = \"deleteButton\" \r\n                                            id = {i} \r\n                                            onClick = {()=>deletePost(i,publicStatus,currentId)}>\r\n                                                x\r\n                                        </button>\r\n                                    {/* </div> */}\r\n                                    </>\r\n                                    :<></>}\r\n                                </div>                        \r\n                                :<div className = \"deleteBackground\">\r\n                                    <button \r\n                                        className = \"deleteButton\" \r\n                                        id = {i} \r\n                                        onClick = {()=>deleteMail(currentId)}>\r\n                                            X\r\n                                    </button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messagebox;","import React, { useState,useEffect } from 'react';\r\nimport Messagebox from './Messagebox';\r\nimport './Message.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\n\r\n\r\n\r\n \r\n\r\nconst Messages = ({user, currentMessage,\r\n                    pastMessages,setCurrentMessage,\r\n                    currentPublicMessage,pastPublicMessages,\r\n                    setCurrentPublicMessage,deletePost,\r\n                    route, addFriend, \r\n                    setFilteredMessages,filteredMessages,\r\n                    publicStatus}) => {\r\n    \r\n    \r\n    const [hiddenStatus,setHiddenStatus] = useState({\r\n                                                picture:\"textareahide\",\r\n                                                message:\"textareahide\",\r\n                                                button:\"\",\r\n                                                submit:\"textareahide\",\r\n                                                position:' middle'\r\n                                            })\r\n    let offset = '';\r\n    let background = '';\r\n\r\n    useEffect(()=>{\r\n\r\n        const currentTime = currentMessage.time\r\n        \r\n        if (currentMessage.message!==''){\r\n        socket.emit('friendmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentMessage.message,\r\n                        time:currentTime,\r\n                        likes:[]\r\n                        })\r\n                        setCurrentMessage((prevCurrentMessage)=>{\r\n                                return {...prevCurrentMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentMessage.time])\r\n\r\n    useEffect(()=>{\r\n        const currentTime = currentPublicMessage.time\r\n       \r\n        if (currentPublicMessage.message!==''){\r\n            socket.emit('publicmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentPublicMessage.message,\r\n                        time:currentTime,\r\n                        likes:[]\r\n                        })\r\n                        setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                                return {...prevCurrentPublicMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentPublicMessage.time])\r\n\r\n\r\n    useEffect(()=>{\r\n        if (user.friends){\r\n        setFilteredMessages(()=>{\r\n            return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))\r\n        })          \r\n             \r\n        }\r\n    },[user.friends,pastMessages])\r\n\r\n   \r\n    const onSubmit = (picture) => {\r\n        let date = new Date\r\n        const timeNow =  date.toLocaleString(\"en-US\", {\r\n            timeZone: `America/New_York`\r\n          });\r\n        if (picture && (currentPublicMessage.message!==\"\" || currentMessage.message !==\"\")){\r\n            publicStatus?\r\n                setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                    return {...prevCurrentPublicMessage,message:\"#img#\"+currentPublicMessage.message}\r\n                })\r\n                :\r\n                setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:\"#img#\"+currentMessage.message}\r\n            })\r\n        }\r\n        publicStatus?\r\n        setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n            return {...prevCurrentPublicMessage,time:timeNow}\r\n        })\r\n        \r\n        :\r\n        setCurrentMessage((prevCurrentMessage)=>{\r\n            return {...prevCurrentMessage,time:timeNow}\r\n        })       \r\n        setHiddenStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\",position:' middle'})          \r\n    }\r\n\r\n    const onInputChange = (event) => {       \r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:event.target.value}\r\n            })\r\n            :setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:event.target.value}\r\n            })            \r\n    }\r\n    \r\n    const checkLiked = (like) =>{\r\n        \r\n        return JSON.parse(like).email!==user.email.toUpperCase()\r\n    }\r\n\r\n    const addLike = (i,currentId) => {\r\n        let contains=true\r\n        \r\n        if (publicStatus){\r\n            const newArr = [...pastPublicMessages]   \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            \r\n            if (!newArr[i].likes,contains ){\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'publicmessages'\r\n                            })\r\n            \r\n            }else{\r\n            socket.emit('dislike',{\r\n                        name:user.name,\r\n                        email:user.email,\r\n                        id:currentId,\r\n                        database:'publicmessages'\r\n                        })\r\n            \r\n            }\r\n        }else if (!publicStatus){\r\n            const newArr = [...filteredMessages]\r\n            \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            if (!newArr[i].likes || contains){\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n            }else{\r\n                socket.emit('dislike',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n            }        \r\n        }\r\n}\r\n\r\n    \r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenStatus({picture:\"\",message:\"textareahide\",button:\"textareahide\",submit:\"\",position:' right'})\r\n        }else{\r\n            setHiddenStatus({picture:\"textareahide\",message:\"\",button:\"textareahide\",submit:\"\",position:' right'})\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\",position:' middle'})\r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:''}\r\n            })\r\n            :setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:''}\r\n            })\r\n    }\r\n\r\n    return(\r\n        <div className = \"maincomment\">                \r\n            {publicStatus?\r\n                <>            \r\n                    <div className = \"inputbox\">          \r\n                        <div>\r\n                            <input \r\n                                id = \"pic\" \r\n                                className = {\"textareapic public \"+hiddenStatus.picture} \r\n                                cols=\"40\" rows=\"6\" \r\n                                onChange = {onInputChange} \r\n                                placeholder = \"Enter Picture URL\" \r\n                                value = {currentPublicMessage.message} \r\n                                autoFocus>\r\n                            </input>\r\n\r\n                            <textarea \r\n                                id=\"msg\" \r\n                                className = {\"textarea public \"+hiddenStatus.message}  \r\n                                onChange = {onInputChange} \r\n                                value = {currentPublicMessage.message} \r\n                                autoFocus>                                    \r\n                            </textarea>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">                \r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>\r\n                                    Submit\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {goBack}>\r\n                                    Back\r\n                            </label>  \r\n\r\n                            <label \r\n                                htmlFor=\"msg\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(false)}>\r\n                                    Message\r\n                            </label>\r\n\r\n                            <label \r\n                                htmlFor =\"pic\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(true)}>\r\n                                    Picture\r\n                            </label>                            \r\n                        </div>\r\n           \r\n                        <div className=\"bigbox\">\r\n                            {pastPublicMessages.map((msg,i)=>{\r\n                                const currentUser = pastPublicMessages.length - 1 -i\r\n                                const currentId = pastPublicMessages[currentUser].id   \r\n                                          \r\n                                return <div key = {i}>\r\n                                    <Messagebox \r\n                                        filteredMessages = {pastPublicMessages} \r\n                                        currentUser = {user.email} \r\n                                        email = {pastPublicMessages[currentUser].email} \r\n                                        text ={pastPublicMessages[currentUser].message} \r\n                                        time = {pastPublicMessages[currentUser].time} \r\n                                        i = {currentUser} \r\n                                        currentId = {currentId}\r\n                                        deletePost = {deletePost} \r\n                                        route={route} \r\n                                        addLike = {addLike} \r\n                                        likes = {pastPublicMessages[currentUser].likes} \r\n                                        publicStatus = {publicStatus}\r\n                                        addFriend = {addFriend}\r\n                                       \r\n                                    />\r\n                                </div>            \r\n                                })\r\n                            }\r\n                        </div>            \r\n                    </div>        \r\n                </>\r\n                :\r\n                <>\r\n                    <div className = \"inputbox\">\r\n                        <input \r\n                            id = \"friendpic\"\r\n                            className = {\"textareapic friend \"+hiddenStatus.picture}  \r\n                            onChange = {onInputChange} \r\n                            placeholder = \"Enter Picture URL\"\r\n                            value = {currentMessage.message}\r\n                        ></input>\r\n                        <textarea\r\n                            id = \"friendmsg\" \r\n                            className = {\"textarea friend \"+hiddenStatus.message} \r\n                            onChange = {onInputChange} \r\n                            value = {currentMessage.message}\r\n                        ></textarea>  \r\n                    </div>\r\n                    \r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">\r\n                            <label \r\n                                htmlFor =\"friendmsg\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(false)}>\r\n                                    Message\r\n                            </label>\r\n\r\n                            <label \r\n                                htmlFor = \"friendpic\" \r\n                                className = {\"msg \"+hiddenStatus.button}\r\n                                onClick = {()=>changeHidden(true)}>\r\n                                    Picture\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>\r\n                                    Submit\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {goBack}>\r\n                                    Back\r\n                            </label>\r\n\r\n                        </div>                \r\n                        <div className=\"bigbox\">                    \r\n                            {filteredMessages.map((message,i)=>{    \r\n                                           \r\n                                const currentUser = filteredMessages.length -1-i\r\n                                const currentId = filteredMessages[currentUser].id                    \r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()\r\n                                        ?offset=\"sender\"\r\n                                        :offset=\"recipient\";\r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()\r\n                                        ?background=\"senderbackground\"\r\n                                        :background=\"\";                                \r\n                                return <div key ={i} className = {offset}>\r\n                                            <Messagebox \r\n                                                filteredMessages = {filteredMessages} \r\n                                                currentUser = {user.email} \r\n                                                email = {filteredMessages[currentUser].email} \r\n                                                text ={filteredMessages[currentUser].message} \r\n                                                time = {filteredMessages[currentUser].time} \r\n                                                i = {currentUser} \r\n                                                currentId = {currentId}\r\n                                                deletePost = {deletePost} \r\n                                                route={route} \r\n                                                addLike = {addLike} \r\n                                                likes = {filteredMessages[currentUser].likes} \r\n                                                publicStatus = {publicStatus}\r\n                                                addFriend = {addFriend}\r\n                                                background = {background}\r\n                                            />\r\n                                        </div>\r\n                                })\r\n                            }\r\n                        </div>  \r\n                    </div>\r\n                </>\r\n            }            \r\n        </div>\r\n        )\r\n    }\r\n    \r\n\r\n\r\nexport default Messages;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colors2.css';\r\n\r\nconst Friend = ({friend,converse, route,unFriend,pendOrReq}) => {\r\n  \r\n    return(\r\n        \r\n        <div className = \"radioButton\">\r\n            {route==='mail'?\r\n                <li>\r\n                    <input \r\n                        type = \"radio\" \r\n                        name = \"friend\" \r\n                        id={friend} \r\n                        onClick = {()=>converse(friend)}\r\n                    />\r\n                    <label htmlFor={friend}>\r\n                        {friend}\r\n                    </label>\r\n                </li>\r\n       \r\n            :\r\n                <li>\r\n                    <input \r\n                        type = \"radio\" \r\n                        name = \"friend\" \r\n                        id={friend} \r\n                        onClick = {()=>converse(friend)}\r\n                    />\r\n                    <label htmlFor={friend}>{friend}</label>\r\n                    <button \r\n                        className = \"friendButton\" \r\n                        onClick = {()=>unFriend(friend,pendOrReq)}>\r\n                            X\r\n                    </button>\r\n                </li>\r\n       \r\n            }\r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Friend;","import React, { useState, useEffect } from 'react';\r\nimport Messagebox from '../Messages/Messagebox';\r\nimport Friend from '../Friends/Friend';\r\nimport './Mail.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\n\r\nconst Mail = ({privateMessage, setPrivateMessage, \r\n                privateMessages, setPrivateMessages, \r\n                user,deletePost,conversation,\r\n                setConversation,converse,\r\n                route}) => {\r\n\r\n    const [hiddenMailStatus,setHiddenMailStatus] = useState({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n    let offset=''\r\n    let background=''\r\n\r\n\r\n    useEffect(()=>{\r\n        const currentTime = privateMessage.time\r\n\r\n        if (privateMessage.message!==''){\r\n            socket.emit('privatemessage',{\r\n                        name:user.name,\r\n                        senderemail:user.email,\r\n                        recipientemail:conversation.you,\r\n                        message:privateMessage.message,\r\n                        time:currentTime\r\n                        })\r\n            }\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,name:'',message:'',time:''}})  \r\n    },[privateMessage.time])\r\n\r\n\r\n    const onChanges= (event) =>{\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,message:event.target.value}\r\n            })\r\n        }\r\n      \r\n\r\n    const onSend = (picture) => {\r\n        let date = new Date\r\n        const timeNow =  date.toLocaleString(\"en-US\", {\r\n            timeZone: `America/New_York`\r\n          });\r\n        if(picture &&(privateMessage.message!=='')){\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,message:'#img#'+privateMessage.message}\r\n            })\r\n          }\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,time:timeNow}\r\n        })\r\n          setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n      }\r\n\r\n    const deleteMail = (currentId) => {  \r\n        socket.emit('deletemail',{\r\n                    id:currentId,\r\n                    database:'privatemessage'\r\n                    })\r\n      }\r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenMailStatus({picture:\"\",message:\"textareahide\",button:\"textareahide\",submit:\"\"})\r\n        }else{\r\n            setHiddenMailStatus({picture:\"textareahide\",message:\"\",button:\"textareahide\",submit:\"\"})\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n        \r\n        setPrivateMessage((prevCurrentPrivateMessage)=>{\r\n            return {...prevCurrentPrivateMessage,message:''}})        \r\n    }\r\n\r\n    const mainMailWindow = ()=>{\r\n        setConversation(prevConversation=>{\r\n            return {...prevConversation,you:''}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className = \"mailbox\">\r\n            {conversation.you?\r\n            <div>\r\n                <div>        \r\n                    <input \r\n                        id = \"picture\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.picture} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        placeholder = \"Enter Picture URL\" \r\n                        value = {privateMessage.message}\r\n                    ></input>\r\n                    <textarea \r\n                        id = \"mail\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.message} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        value = {privateMessage.message}\r\n                    ></textarea>\r\n                    <div className = \"mailButtons\">\r\n\r\n                        <label \r\n                            htmlFor = \"mail\" \r\n                            className = {\"buttons \"+hiddenMailStatus.button} \r\n                            onClick = {()=>changeHidden(false)}>\r\n                                Message\r\n                        </label>\r\n\r\n                        <label \r\n                            htmlFor = \"picture\" \r\n                            className = {\"buttons \"+hiddenMailStatus.button} \r\n                            onClick = {()=>changeHidden(true)}>\r\n                                Picture\r\n                        </label>\r\n\r\n                        <label \r\n                            className = {\"buttons \"+hiddenMailStatus.submit} \r\n                            onClick = {()=>onSend(hiddenMailStatus.picture===\"\")}>\r\n                                Submit\r\n                        </label>\r\n\r\n                        <label \r\n                            className = {\"buttons \"+hiddenMailStatus.submit} \r\n                            onClick = {goBack}>\r\n                                Back\r\n                        </label>\r\n\r\n                    </div>\r\n                    <div className = \"privateMessage\">\r\n                        <button className = \"backButton\" onClick = {mainMailWindow}>&lt;</button>\r\n                        <p className = \"contactName\">{conversation.you}</p>\r\n                    </div>    \r\n                </div>\r\n                <div className = \"messages\">               \r\n                {privateMessages.map((message,i)=>{\r\n                    const currentMessage = privateMessages.length-1-i\r\n                    const currentId = privateMessages[currentMessage].id\r\n                    if (((privateMessages[currentMessage].recipientemail.toUpperCase() === conversation.you\r\n                        &&privateMessages[currentMessage].senderemail.toUpperCase() === user.email)\r\n                            ||(privateMessages[currentMessage].senderemail.toUpperCase() ===conversation.you\r\n                            &&privateMessages[currentMessage].recipientemail.toUpperCase() === user.email)\r\n                            ))\r\n                            {    \r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()\r\n                                    ?offset=\"sender\"\r\n                                    :offset=\"recipient\";\r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()\r\n                                    ?background=\"senderbackground\" \r\n                                    :background=\"\";\r\n                                return <div className = {offset}>\r\n                                    \r\n                                            <Messagebox email = {privateMessages[currentMessage].senderemail} \r\n                                            text ={privateMessages[currentMessage].message} \r\n                                            time = {privateMessages[currentMessage].time} \r\n                                            i = {i}\r\n                                            deleteMail = {deleteMail} \r\n                                            currentId = {currentId}\r\n                                            background = {background} \r\n                                            />\r\n                                        </div>\r\n                            }\r\n                    \r\n                    })\r\n                }\r\n            </div> \r\n            </div>\r\n                :\r\n                <div className = 'nocontactContainer'>\r\n                    \r\n                    <p className = \"contactName\">Select a contact to message</p>\r\n                                            <ul className = \"contactScroll\">                            \r\n                                                {user.friends.map((friend)=>{\r\n                                                    return <div>\r\n                                                        <Friend converse = {converse} friend = {friend} route={route} />\r\n                                                        \r\n                                                        </div>\r\n                                                    })\r\n                                                }\r\n                                             </ul>\r\n    \r\n                                        \r\n                    \r\n                </div>\r\n            }\r\n                       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mail;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colors2.css';\r\n\r\nconst Request = ({friend, rejectFriend,acceptFriend,pendOrReq}) => {\r\n \r\n    return(\r\n        <div className = \"radioButton\">\r\n            <li>\r\n                <input \r\n                    type = \"radio\" \r\n                    name = \"friend\" \r\n                    id={friend} \r\n                />\r\n                <label \r\n                    htmlFor={friend}>{friend}</label>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>acceptFriend(friend)}>\r\n                        Accept\r\n                </button>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>rejectFriend(friend,pendOrReq)}>\r\n                        X\r\n                </button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Request;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colors2.css';\r\n\r\nconst Pending = ({friend, rejectFriend,pendOrReq}) => {\r\n    \r\n    return(\r\n        <div className = \"radioButton\">\r\n             <li>\r\n                 <input \r\n                    type = \"radio\" \r\n                    name = \"friend\" \r\n                    id={friend} \r\n                />\r\n                <label htmlFor={friend}>{friend}</label>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>rejectFriend(friend,pendOrReq)}>\r\n                        X\r\n                </button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pending;","import React, {useState,useEffect} from 'react';\r\nimport Friend from './Friend';\r\nimport Request from './Request';\r\nimport Pending from './Pending';\r\nimport './Friends.css';\r\nimport '../../colors2.css';\r\n\r\n\r\nconst arrow = \"x\";\r\n\r\nconst Friends = ({user,addFriend,converse}) => {\r\n    \r\n    const [uniqueRequests,setUniqueRequests] = useState([...new Set(user?.requests)])\r\n    const [uniquePending,setUniquePending] = useState([...new Set(user?.pendingrequests)])\r\n   \r\n    useEffect(() =>{\r\n        setUniqueRequests([...new Set(user.requests)])\r\n        setUniquePending([...new Set(user.pendingrequests)])\r\n    },[user])\r\n\r\n\r\n    const unFriend = (friend) =>{\r\n        \r\n        fetch('https://socially-distanced-server.herokuapp.com/unfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend.toUpperCase()\r\n                })\r\n            })\r\n            .then(res=>res.json())\r\n            .then(res=>{                \r\n            }).catch(err=>console.log(err))\r\n    }\r\n\r\n    const acceptFriend = (friend) =>{        \r\n        fetch('https://socially-distanced-server.herokuapp.com/acceptfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend\r\n                })\r\n            })\r\n            .then(res=>res.json())\r\n            .then(res=>{\r\n            }).catch(err=>console.log(err))\r\n    }\r\n\r\n\r\n    const rejectFriend = (friend,pendOrReq) =>{      \r\n        if (pendOrReq==='Request'){\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:user.email,\r\n                    friend:friend,\r\n                    option:'request'\r\n                }\r\n                    )\r\n                })\r\n                .then(res=>res.json())\r\n                .then(res=>{\r\n                    \r\n                }).catch(err=>console.log(err))\r\n        }else{\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:friend,\r\n                    friend:user.email,\r\n                    option:'pending'\r\n                }\r\n                    )\r\n                })\r\n                .then(res=>res.json())\r\n                .then(res=>{\r\n                   \r\n                }).catch(err=>console.log(err))\r\n            }\r\n        \r\n        \r\n    }\r\n\r\n    const { friends } = user\r\n    \r\n    return(\r\n            \r\n        <div className = \"maincomment\">                \r\n                \r\n                \r\n               \r\n                <div className=\"commentsection\">\r\n                    \r\n        \r\n                    <div className=\"\">\r\n                    <div className = \"\">\r\n                            <div  className=\"\">\r\n                                <div >\r\n                        \r\n                                    {friends?\r\n                                        <div >\r\n                                            <ul className = \"scroll\">                            \r\n                                                {friends.map((friend)=>{\r\n                                                    return <Friend \r\n                                                                converse = {converse} \r\n                                                                friend = {friend} \r\n                                                                unFriend = {unFriend} \r\n                                                            />\r\n                                                    })\r\n                                                }\r\n                                             </ul>\r\n    \r\n                                        </div>\r\n                                        :<></>\r\n                                     }\r\n                        \r\n            \r\n                                    <button className = \"addFriend\" onClick = {()=>addFriend(\"No Names\")}>Add Friend</button>\r\n                                </div>\r\n                        \r\n                                {uniqueRequests && uniqueRequests[0]?\r\n                                    <div className = \"scroll\">  \r\n                                        <div className=\"friendtitlebox\"><p className=\"requesttitle\">Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {uniqueRequests.map((friend)=>{\r\n                                                return <Request \r\n                                                            friend = {friend} \r\n                                                            rejectFriend = {rejectFriend} \r\n                                                            pendOrReq ={'Request'} \r\n                                                            acceptFriend = {acceptFriend}\r\n                                                        />\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    :<></>\r\n                                }\r\n                                {uniquePending&&uniquePending[0]?\r\n                                    <div className = \"scroll\">\r\n                                        <div className=\"friendtitlebox\"><p className=\"pendingtitle\">Pending Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {uniquePending.map((friend)=>{\r\n                                                return <Pending \r\n                                                            friend = {friend} \r\n                                                            rejectFriend = {rejectFriend} \r\n                                                            pendOrReq = {'Pending'}\r\n                                                        />\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n        \r\n                                    </div>\r\n                                    :<></>\r\n                                }\r\n                        \r\n                            </div>\r\n                          \r\n          \r\n    </div>\r\n    </div>\r\n    </div></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Friends;","import React, { useState, useEffect } from 'react';\r\nimport Login from './component/Login/Login';\r\nimport Navigation from './component/Navigation/Navigation';\r\nimport Messages from './component/Messages/Messages';\r\nimport Mail from './component/Mail/Mail';\r\nimport Friends from './component/Friends/Friends';\r\nimport socket from './socket'\r\nimport './App.css';\r\nimport './colors2.css';\r\n\r\n// http://localhost:3005/\r\n\r\n\r\nfunction App() {\r\n  const [user,setUser] = useState({name:'',email:'',friends:[],request:[],pendingrequests:[]})\r\n  const [password,setPassword] = useState('')\r\n  const [route,setRoute] = useState('Sign In')\r\n  const [isSignedIn,setIsSignedIn] = useState(false)\r\n  const [errorMessage,setErrorMessage] = useState('')\r\n  const [pastMessages,setPastMessages] = useState([])\r\n  const [currentMessage, setCurrentMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [pastPublicMessages,setPastPublicMessages] = useState([])\r\n  const [currentPublicMessage, setCurrentPublicMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [privateMessages,setPrivateMessages] = useState([])\r\n  const [privateMessage, setPrivateMessage] = useState({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n  const [conversation,setConversation] = useState({me:'',you:''})\r\n  const [filteredMessages,setFilteredMessages] = useState({})\r\n  const [publicStatus,setPublicStatus] = useState(true);\r\n  const myEmail = user.email\r\n  \r\n  useEffect(()=>{\r\n    socket.on('friendrequest',data=>{\r\n      if (data[0].email===myEmail){\r\n        setUser(data[0])\r\n        \r\n      }\r\n      return ()=>{\r\n\r\n        socket.off('friendrequest')\r\n      }\r\n    })\r\n  },[myEmail])\r\n\r\n  useEffect(()=>{\r\n    socket.on('unfriend',data=>{\r\n      if (data[0].email===myEmail){\r\n        setUser(data[0])\r\n      }\r\n      \r\n    })\r\n    return ()=>{\r\n      socket.off('unfriend')\r\n    }\r\n  },[myEmail])\r\n  \r\n  useEffect(()=>{\r\n    socket.on('reject',data=>{\r\n      \r\n      if (data[0].email===myEmail){\r\n        \r\n        setUser(data[0])\r\n      }\r\n    })\r\n    return ()=>{\r\n      socket.off('reject')\r\n    }\r\n  },[myEmail])\r\n\r\n  useEffect(()=>{\r\n    socket.on('acceptfriend',data=>{\r\n      \r\n      if (data[0].email===myEmail){\r\n        setUser(data[0])\r\n      }})\r\n      return ()=>{\r\n        socket.off('acceptfriend')\r\n      }\r\n  },[myEmail])\r\n\r\n\r\n  socket.on('privatemessage',(data)=>{\r\n    setPrivateMessages(data)\r\n  })\r\n  socket.on('publicmessage',(data)=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('friendmessage',(data)=>{\r\n  \r\n  setPastMessages(data)\r\n})\r\nsocket.on('publiclikes',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('friendlikes',data=>{\r\n  setPastMessages(data)\r\n})\r\nsocket.on('publicdislike',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('frienddislike',data=>{\r\n  setPastMessages(data)\r\n})\r\nsocket.on('publicdeletemessage',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('frienddeletemessage',data=>{\r\n    setPastMessages(data)\r\n})\r\nsocket.on('deletemail',data=>{\r\n    setPrivateMessages(data)\r\n})\r\n\r\n\r\n\r\n  useEffect (()=>{\r\n    if (user.friends){\r\n      setFilteredMessages(()=>{\r\n        return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))})\r\n    } \r\n  },[])\r\n \r\n  const resetState = () => {\r\n    setRoute('Sign In')\r\n    setIsSignedIn(false)\r\n    setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n    setCurrentMessage({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n    setPrivateMessage({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n    setConversation({me:'',you:''})\r\n    setPublicStatus(true)\r\n    setErrorMessage('')\r\n    setPassword('')\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n    (route === 'home' || route ==='mail' || route ==='friends' || route===\"friend\" )?setIsSignedIn(true):resetState();\r\n    setRoute(route)\r\n  }\r\n  \r\n\r\n  const loadData = (location,info,infoUpdate) =>{\r\n    fetch(`https://socially-distanced-server.herokuapp.com/${location}`,{\r\n          method:'post',\r\n          headers:{'Content-Type':'application/json'},\r\n          body:info\r\n          })\r\n          .then(res=>res.json())\r\n          .then(res=>{\r\n              infoUpdate(res)})\r\n          .catch(err=>console.log(err))\r\n          \r\n  }\r\n\r\n\r\n  const deletePost = (currentIndex,publicStatus,currentId) => {\r\n    if (publicStatus){\r\n      socket.emit('deletemessage',{\r\n                id:currentId,\r\n                database:'publicmessages'\r\n                })\r\n    }else{\r\n      socket.emit('deletemessage',{\r\n        id:currentId,\r\n        database:'friendmessage'\r\n        })\r\n  }}\r\n\r\n  const addFriend = (newFriend) => {\r\n    \r\n    if (newFriend===\"No Names\"){\r\n      newFriend = prompt('Enter the email address of your friend ')\r\n    }\r\n    \r\n    if (newFriend){\r\n        if (!user.friends||!user.friends.includes(newFriend)||!user.pendingrequests.includes(newFriend)||!user.request.includes(newFriend)){\r\n          fetch('https://socially-distanced-server.herokuapp.com/friendrequest',{\r\n              method:'post',\r\n              headers:{'Content-Type':'application/json'},\r\n              body:JSON.stringify({\r\n                  email:user.email,\r\n                  newFriend:newFriend.toUpperCase()\r\n                  })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(res=>{    \r\n                \r\n                alert(`Friend request sent to ${newFriend.toUpperCase()}.`)\r\n                \r\n                  \r\n            }).catch(err=>console.log(err))\r\n            \r\n          }\r\n    }\r\n   \r\n  }\r\n\r\n  \r\n  const changePublicStatus = (route,publicState) => {\r\n    setPublicStatus(publicState)\r\n    onRouteChange(route)\r\n    \r\n}\r\n\r\nconst converse = (friend) => {\r\n  setConversation((prevConversation)=>{\r\n      return {...prevConversation,you:friend}\r\n  })\r\n  setPrivateMessage((prevPrivateMessage)=>{\r\n      return {...prevPrivateMessage,recipientEmail:friend}\r\n  })\r\n  setRoute('mail')\r\n}\r\n       \r\n \r\n\r\n  return (\r\n    <div className=\"App\">      \r\n        <Navigation \r\n            onRouteChange = {onRouteChange} \r\n            isSignedIn = {isSignedIn}\r\n            route={route}\r\n            user = {user} \r\n            changePublicStatus = {changePublicStatus}\r\n        />\r\n    \r\n        {isSignedIn\r\n            ? (route==='home'||route==='friend'\r\n                  ?<div className = \"main\">\r\n                        <div className = \"mainMessage\">\r\n                            <Messages \r\n                                user = {user} \r\n                                loadData = {loadData}\r\n                                route = {route}\r\n                                deletePost = {deletePost}\r\n                                currentMessage = {currentMessage}\r\n                                setCurrentMessage = {setCurrentMessage}\r\n                                pastMessages = {pastMessages}\r\n                                setPastMessages = {setPastMessages}\r\n                                currentPublicMessage = {currentPublicMessage}\r\n                                setCurrentPublicMessage = {setCurrentPublicMessage}\r\n                                pastPublicMessages = {pastPublicMessages}\r\n                                setPastPublicMessages = {setPastPublicMessages}\r\n                                addFriend = {addFriend}\r\n                                conversation = {conversation}\r\n                                setFilteredMessages = {setFilteredMessages}\r\n                                filteredMessages = {filteredMessages}\r\n                                publicStatus = {publicStatus}\r\n                                setPublicStatus = {setPublicStatus}\r\n                              />\r\n                        </div>\r\n                  </div>\r\n                  :route==='mail'?\r\n                  <div className = \"main\">\r\n                      <div className = \"mainMessage\">\r\n                          <Mail \r\n                              user ={user} \r\n                              privateMessage = {privateMessage} \r\n                              setPrivateMessage = {setPrivateMessage} \r\n                              privateMessages = {privateMessages} \r\n                              setPrivateMessages = {setPrivateMessages} \r\n                              deletePost = {deletePost} \r\n                              conversation = {conversation}\r\n                              loadData = {loadData} \r\n                              setConversation = {setConversation}\r\n                              converse = {converse}\r\n                              route = {route}\r\n                            /> \r\n                      </div>\r\n                  </div>\r\n                  :\r\n                  \r\n                        <Friends \r\n                            user = {user}                           \r\n                            addFriend = {addFriend}                            \r\n                            converse = {converse}\r\n                            \r\n                        />\r\n                  )\r\n        \r\n            :(<>\r\n                <Login \r\n                    user = {user}\r\n                    route = {route} \r\n                    errorMessage = {errorMessage}\r\n                    setUser = {setUser}\r\n                    setRoute = {setRoute}\r\n                    setErrorMessage = {setErrorMessage}\r\n                    setIsSignedIn = {setIsSignedIn}\r\n                    onRouteChange = {onRouteChange}            \r\n                    setCurrentMessage = {setCurrentMessage}\r\n                    pastMessages = {pastMessages}\r\n                    setPrivateMessages = {setPrivateMessages}\r\n                    setPastMessages = {setPastMessages}\r\n                    setCurrentPublicMessage = {setCurrentPublicMessage}\r\n                    setPastPublicMessages = {setPastPublicMessages}\r\n                    setConversation = {setConversation}\r\n                    setFilteredMessages = {setFilteredMessages}\r\n                    loadData = {loadData}\r\n                    password = {password}\r\n                    setPassword = {setPassword}\r\n                    \r\n                  \r\n                    />          \r\n                </>\r\n              )\r\n        }\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import './colors.css';\r\nimport './colors2.css';\r\n// import './colors3.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}