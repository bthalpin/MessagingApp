{"version":3,"sources":["component/Login/Inputblock.js","socket.js","component/Login/Login.js","images/hamburger.png","images/notification.png","component/Navigation/Navigation.js","component/Messages/Picture.js","images/like.png","images/liked.png","images/delete.png","component/Messages/Messagebox.js","component/Messages/Messages.js","component/Friends/Friend.js","component/Mail/Mail.js","component/Friends/Request.js","component/Friends/Pending.js","component/Friends/Friends.js","App.js","reportWebVitals.js","index.js"],"names":["Inputblock","inputType","onChanges","value","className","htmlFor","type","name","id","onChange","socket","io","Login","user","route","errorMessage","setRoute","setUser","setErrorMessage","setIsSignedIn","onRouteChange","setCurrentMessage","setPrivateMessages","setConversation","setPastMessages","setPastPublicMessages","loadData","password","setPassword","email","event","target","prevUser","console","log","onClick","upperEmail","toUpperCase","fetch","method","headers","body","JSON","stringify","then","res","json","prevCurrentMessage","me","you","friends","emit","recipientemail","requests","pendingrequests","catch","err","verifyLogin","test","length","verifyRegistration","Navigation","isSignedIn","changePublicStatus","totalMessages","useState","hideStatus","setHideStatus","hide","closeDropDown","status","src","Hamburger","alt","width","Notificationicon","Picture","source","Messagebox","text","time","i","deletePost","deleteMail","addLike","currentUser","currentId","filteredMessages","background","publicStatus","addFriend","likes","includes","substr","indexOf","Liked","Like","parse","Delete","Messages","currentMessage","pastMessages","currentPublicMessage","pastPublicMessages","setCurrentPublicMessage","setFilteredMessages","picture","message","button","submit","position","hiddenStatus","setHiddenStatus","offset","useEffect","currentTime","prevCurrentPublicMessage","filter","onSubmit","timeNow","Date","toLocaleString","timeZone","onInputChange","checkLiked","like","contains","newArr","every","database","changeHidden","goBack","cols","rows","placeholder","autoFocus","map","msg","Friend","friend","converse","unFriend","pendOrReq","Mail","privateMessage","setPrivateMessage","privateMessages","conversation","unread","hiddenMailStatus","setHiddenMailStatus","senderemail","prevPrivateMessage","onSend","prevCurrentPrivateMessage","total","read","Request","rejectFriend","acceptFriend","Pending","Friends","option","App","request","setPublicStatus","myEmail","setUnread","setTotalMessages","reduce","acc","on","data","off","prevUnread","recipientEmail","signedInStatus","window","localStorage","getItem","loadedStatus","initialRoute","loadedRoute","getUser","loadedUser","getConversation","loadedConversation","getUnread","loadedUnread","getPublicStatus","loadedPublicStatus","setItem","prevConversation","location","info","infoUpdate","newFriend","prompt","alert","publicState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2eb839fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Login.css';\r\nimport '../../colorScheme.css';\r\n\r\nconst Inputblock = ({inputType,onChanges,value}) => {\r\n    return (\r\n                \r\n        <div className=\"inputBlock\">\r\n            <label className=\"inputLabel\" htmlFor={inputType}>{inputType}</label>\r\n            <input \r\n                className=\"inputField\" \r\n                type= {inputType}\r\n                name={inputType}  \r\n                id={inputType}\r\n                value={value}\r\n                onChange = {onChanges}\r\n            />\r\n        </div>\r\n                \r\n    )\r\n}\r\n\r\nexport default Inputblock;","import {io} from \"socket.io-client\";\r\n\r\nconst URL = \"https://socially-distanced-server.herokuapp.com/\";\r\n// const URL = \"http://localhost:3005\"\r\nconst socket = io(URL);\r\n\r\nexport default socket;","import React from 'react';\r\nimport Inputblock from './Inputblock';\r\nimport './Login.css';\r\nimport '../../colorScheme.css';\r\nimport socket from '../../socket';\r\n\r\nconst Login = ({\r\n    user,route,errorMessage,\r\n    setRoute,setUser, setErrorMessage,\r\n    setIsSignedIn,onRouteChange, \r\n    setCurrentMessage, setPrivateMessages, \r\n    setConversation, setPastMessages,\r\n    setPastPublicMessages,\r\n    loadData,password,setPassword\r\n  }) => {\r\n    \r\n    const {name,email} = user;\r\n    \r\n    const onChanges= (event) =>{\r\n        switch (event.target.id){\r\n          case 'Name':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,name:event.target.value}})\r\n             \r\n            break;\r\n          case 'Email':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,email:event.target.value}})\r\n            break;\r\n          case 'Password':\r\n            setPassword(event.target.value)\r\n            break;\r\n          default:\r\n              console.log(event.target.value)\r\n        }\r\n      }\r\n  \r\n\r\n    const verifyLogin = (upperEmail) => {\r\n        fetch('https://socially-distanced-server.herokuapp.com/signin',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n              email:upperEmail,\r\n              password:password\r\n            })\r\n          })\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            if (res.email===upperEmail){\r\n              setUser(res)\r\n              setRoute('home')\r\n              setIsSignedIn(true)\r\n              setErrorMessage('')\r\n              setPassword('')\r\n              setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,name:res.name,email:upperEmail}})\r\n                \r\n              setConversation({me:res.email,you:''})\r\n              loadData('friendmessageload',\r\n                JSON.stringify({\r\n                  email:upperEmail,\r\n                  friends:user.friends\r\n                }),\r\n                setPastMessages\r\n              )\r\n              loadData('publicmessageload',\r\n                JSON.stringify({\r\n                    email:upperEmail,\r\n                    friends:user.friends\r\n                }),\r\n                setPastPublicMessages\r\n              )\r\n\r\n              loadData('privatemessageload',\r\n                JSON.stringify({\r\n                  email: upperEmail,\r\n                  friends:user.friends\r\n                }),\r\n                setPrivateMessages\r\n              )    \r\n              socket.emit('loadRead',{recipientemail:upperEmail})\r\n\r\n            }else{\r\n              setErrorMessage('Invalid Login Information')\r\n              setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n              setPassword('')\r\n            }\r\n            \r\n        })\r\n        .catch(err=>console.log(err))\r\n      }\r\n    \r\n      const verifyRegistration = (upperEmail) => {\r\n        const emailPattern = /\\S+@\\S+\\.\\S+/\r\n            if (emailPattern.test(email) && password.length>=8){\r\n              fetch('https://socially-distanced-server.herokuapp.com/register',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                  name:user.name,\r\n                  email:upperEmail,\r\n                  password:password,\r\n                  friends:user.friends\r\n                })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(user=>{\r\n                if (user==='TAKEN'){\r\n                  setErrorMessage('That email address is already registered.')\r\n                }else{\r\n                  setUser(user)\r\n                  setRoute('home')\r\n                  setIsSignedIn(true)\r\n                  setErrorMessage('')\r\n                  setPassword('')\r\n                  setCurrentMessage((prevCurrentMessage)=>{\r\n                    return {...prevCurrentMessage,name:user.name,email:user.email}})\r\n                  loadData('publicmessageload',\r\n                    JSON.stringify({\r\n                        email:upperEmail,\r\n                        friends:user.friends\r\n                    }),\r\n                    setPastPublicMessages\r\n                    )\r\n                  }\r\n                \r\n            \r\n                })\r\n                .catch(err=>console.log(err))\r\n\r\n                \r\n              }else if (password.length<8){\r\n                setErrorMessage('Password must be 8 characters long')\r\n              }else{\r\n                setErrorMessage('Enter a valid email address')\r\n              }\r\n      }\r\n\r\n      const onSubmit = () => {\r\n        const upperEmail = user.email.toUpperCase()\r\n        route==='Sign In'?verifyLogin(upperEmail):verifyRegistration(upperEmail);\r\n      }    \r\n      \r\n    return(        \r\n        <div>\r\n            <div className=\"container\">\r\n                <article className=\"formWindow\">\r\n                    <div className = \"formcontainer\">\r\n                        {(route===\"Register\"\r\n                            ?\r\n                            <div>\r\n                                <h1 className=\"legend\">Register</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Name\"} value={name} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Email\"} value = {email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <h1 className=\"legend\">Sign In</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Email\"} value={email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"legend\">\r\n                            <button type = \"submit\" className = \"button\" onClick = {onSubmit}>Submit</button>\r\n                        </div>\r\n                        <div className=\"legend\">\r\n                            {route==='Sign In'\r\n                            ?<p onClick = {() => onRouteChange('Register')}className=\"loginLink\">Register</p>\r\n                            :<p onClick = {() => onRouteChange('Sign In')} className=\"loginLink\">Sign In</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Login;","export default __webpack_public_path__ + \"static/media/hamburger.745580e9.png\";","export default __webpack_public_path__ + \"static/media/notification.ad736cf8.png\";","import React, {useState}from 'react';\r\nimport './Navigation.css';\r\nimport '../../colorScheme.css';\r\nimport Hamburger from \"../../images/hamburger.png\";\r\nimport Notificationicon from \"../../images/notification.png\";\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn,\r\n                    route, user, \r\n                    changePublicStatus,\r\n                    totalMessages})=>{\r\n\r\n    const [hideStatus,setHideStatus] = useState('Hidden')\r\n\r\n    const hide = ()=>{\r\n        hideStatus==='Hidden'?setHideStatus(''):setHideStatus('Hidden')\r\n      \r\n    }\r\n\r\n    const closeDropDown = (route,status) =>{\r\n        if (hideStatus === ''){\r\n            setHideStatus('Hidden')\r\n        }\r\n        if (status===true||status===false){\r\n            changePublicStatus(route,status)\r\n        \r\n        }else{\r\n            onRouteChange(route)\r\n        }\r\n    }\r\n\r\n    if (isSignedIn){\r\n        return (\r\n            <div className = \"navroot\">\r\n                <div className = \"title\">Halpin Messaging App</div>\r\n                    <div>\r\n                        <button \r\n                            className = \"hideButton\" \r\n                            onClick = {hide}>\r\n                                <img src = {Hamburger} alt = \"=\" width=\"30rem\"></img>\r\n                                \r\n                        {user?.requests?.length||totalMessages>0\r\n                                        ?<img  className = \"notificationIcon\" src = {Notificationicon} alt = \"=\" width=\"30rem\"></img>\r\n                                        :<></>}\r\n                        </button>\r\n                    </div>\r\n                <div className = {'mainNav'+hideStatus}> \r\n                    <button className = \"wideButton\" onClick = {hide}>Close</button>\r\n                            <div className = \"navButtonContainer \" >\r\n                                <p \r\n                                    onClick = {()=>closeDropDown('home',true)} \r\n                                    className = {\"navButtons home\"+ route}>\r\n                                        Public Chat\r\n                                </p>\r\n                                \r\n                                    \r\n                                </div>\r\n                                <div>\r\n                                <p \r\n                                    className = {\"navButtons friend\"+ route} \r\n                                    onClick = {()=>closeDropDown('friend',false)}>\r\n                                        Friends Chat\r\n                                </p>\r\n                            </div>\r\n                       \r\n                        <div>\r\n                            <p \r\n                                className = {\"navButtons private mail\"+ route} \r\n                                onClick = {() => closeDropDown('mail')}>\r\n                                    Private Message\r\n                                    {totalMessages>0?\r\n                            <span className = \"message\" >{totalMessages}</span>\r\n                            :<></>}\r\n                            </p>\r\n                            \r\n                        </div>\r\n                       \r\n                        <div className = \"\">\r\n                            <p \r\n                                className = {\"navButtons friends\"+ route} \r\n                                onClick = {()=>closeDropDown('friends')}>\r\n                                    Contacts\r\n                                    {user?.requests?.length\r\n                                        ?<span className = \"requests\">{user.requests.length}</span>\r\n                                        :<></>}\r\n                            </p>\r\n                        </div>\r\n                        <nav className = \"\">\r\n                            <p \r\n                                onClick = {() => onRouteChange('Sign In')} \r\n                                className = {\"navButtons \"}>\r\n                                    Sign Out\r\n                            </p>\r\n                        </nav>\r\n                    </div>\r\n                \r\n            </div>            \r\n        )\r\n    }else {\r\n        return (\r\n            <div >\r\n            </div>            \r\n            )   \r\n        }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './Picture.css';\r\n\r\nconst Picture = (source) => {\r\n    return (\r\n        <div >\r\n            <img \r\n                className = \"picture\" \r\n                alt = \"picture\" \r\n                src = {source.source} \r\n            ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Picture;","export default __webpack_public_path__ + \"static/media/like.4c10340e.png\";","export default __webpack_public_path__ + \"static/media/liked.62603ce6.png\";","export default __webpack_public_path__ + \"static/media/delete.ea6c2f93.png\";","import React from 'react';\r\nimport \"./Message.css\";\r\nimport '../../colorScheme.css';\r\nimport Picture from './Picture';\r\nimport Like from '../../images/like.png';\r\nimport Liked from '../../images/liked.png';\r\nimport Delete from '../../images/delete.png';\r\n\r\nconst Messagebox = ({ route,text, \r\n                    email, time, i, \r\n                    deletePost,deleteMail, \r\n                    addLike, currentUser,\r\n                    currentId,filteredMessages,\r\n                    background,publicStatus,\r\n                    addFriend, likes}) => {\r\n   \r\n    return (\r\n        <div className = \"box\">\r\n            <div className = \"smallbox\">\r\n               <div className = {\"messageArea \" +background}>\r\n                    <div className = \"text\">\r\n                        <div className = \"textmessage\">\r\n                            {text.includes('#img#')\r\n                                ? <Picture source = {text.substr(5,text.length-1)}/>\r\n                                :<p>{text}</p>}\r\n                        </div>                        \r\n                    </div>              \r\n                </div>\r\n                \r\n                <div className = {\"user \" + background}>                    \r\n                    <p className = \"friendName\" onClick={()=>addFriend(email)}>{email.toUpperCase().substr(0,email.indexOf('@'))}</p>\r\n                    <p className='date'>{time}</p>\r\n                </div>\r\n               \r\n                <div className={\"likes \"}>\r\n                        {route === 'home'||route==='friend'\r\n                            ?<div className = \"likeButton\" onClick = {()=>addLike(i,currentId)}>\r\n                                {likes?JSON.stringify(likes).includes(currentUser)\r\n                                        ?<img src = {Liked} alt=\"Unlike\" width=\"23rem\"></img>\r\n                                        :<img src = {Like} alt=\"like\" width = \"23rem\"></img>\r\n                                        :<img src = {Like} alt=\"like\" width = \"23rem\"></img>}\r\n                            </div>\r\n                            \r\n                            :<></>}\r\n                    <div className = \"likedelete\">                    \r\n                        {route === 'home'||route==='friend'\r\n                            ?likes\r\n                                ?(<div className = \"liketext\">\r\n                                    {likes.length>=4\r\n                                        ?`${likes.length} Likes`\r\n                                        :(likes.length>1\r\n                                            ?(likes.length===3\r\n                                                ?JSON.parse(likes[0]).name+', '+JSON.parse(likes[1]).name+', and '+JSON.parse(likes[2]).name+' like this post'\r\n                                                :JSON.parse(likes[0]).name+' and '+JSON.parse(likes[1]).name+' like this post')\r\n                                            :(likes.length?JSON.parse(likes).name+' likes this post':''))}\r\n                                </div>\r\n                                 ):<></>\r\n                            :<></>\r\n                        }\r\n                        <div className = \"deletContainer\">\r\n                            {route === \"home\"||route==='friend'\r\n                                ?<div>{filteredMessages[i].email===currentUser\r\n                                    ?\r\n                                        <div \r\n                                            className = \"deleteButton\" \r\n                                            id = {i} \r\n                                            onClick = {()=>deletePost(publicStatus,currentId)}>\r\n                                                <img src={Delete} alt=\"delete\" width=\"22rem\"></img>\r\n                                        </div>                                    \r\n                                    :<></>}\r\n                                </div>                        \r\n                                :\r\n                                    <div \r\n                                        className = \"deleteButton\" \r\n                                        id = {i} \r\n                                        onClick = {()=>deleteMail(currentId)}>\r\n                                            <img src={Delete} alt=\"delete\" width=\"22rem\"></img>\r\n                                    </div>\r\n                            }\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messagebox;","import React, { useState,useEffect } from 'react';\r\nimport Messagebox from './Messagebox';\r\nimport './Message.css';\r\nimport '../../colorScheme.css';\r\nimport socket from '../../socket';\r\n\r\n\r\n\r\n \r\n\r\nconst Messages = ({user, currentMessage,\r\n                    pastMessages,setCurrentMessage,\r\n                    currentPublicMessage,pastPublicMessages,\r\n                    setCurrentPublicMessage,deletePost,\r\n                    route, addFriend, \r\n                    setFilteredMessages,filteredMessages,\r\n                    publicStatus}) => {\r\n\r\n    const [hiddenStatus,setHiddenStatus] = useState({\r\n                                                picture:\"textareahide\",\r\n                                                message:\"textareahide\",\r\n                                                button:\"\",\r\n                                                submit:\"textareahide\",\r\n                                                position:' middle'\r\n                                            })\r\n    let offset = '';\r\n    let background = '';\r\n\r\n    useEffect(()=>{\r\n\r\n        const currentTime = currentMessage.time\r\n        \r\n        if (currentMessage.message!==''){\r\n        socket.emit('friendmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentMessage.message,\r\n                        time:currentTime,\r\n                        likes:[]\r\n                        })\r\n                        setCurrentMessage((prevCurrentMessage)=>{\r\n                                return {...prevCurrentMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentMessage.time])\r\n\r\n    useEffect(()=>{\r\n        const currentTime = currentPublicMessage.time\r\n       \r\n        if (currentPublicMessage.message!==''){\r\n            socket.emit('publicmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentPublicMessage.message,\r\n                        time:currentTime,\r\n                        likes:[]\r\n                        })\r\n                        setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                                return {...prevCurrentPublicMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentPublicMessage.time])\r\n\r\n\r\n    useEffect(()=>{\r\n        if (user.friends){\r\n        setFilteredMessages(()=>{\r\n            return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))\r\n            })     \r\n        }\r\n    },[user.friends,pastMessages])\r\n\r\n   \r\n    const onSubmit = (picture) => {\r\n        let date = new Date\r\n        const timeNow =  date.toLocaleString(\"en-US\", {\r\n            timeZone: `America/New_York`\r\n          });\r\n        if (picture && (currentPublicMessage.message!==\"\" || currentMessage.message !==\"\")){\r\n            publicStatus?\r\n                setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                    return {...prevCurrentPublicMessage,message:\"#img#\"+currentPublicMessage.message}\r\n                })\r\n            :\r\n                setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:\"#img#\"+currentMessage.message}\r\n            })\r\n        }\r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,time:timeNow}\r\n            })\r\n        \r\n        :\r\n            setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,time:timeNow}\r\n            })       \r\n            setHiddenStatus({\r\n                                picture:\"textareahide\",\r\n                                message:\"textareahide\",\r\n                                button:\"\",\r\n                                submit:\"textareahide\",\r\n                                position:' middle'\r\n                            })          \r\n    }\r\n\r\n    const onInputChange = (event) => {       \r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:event.target.value}\r\n            })\r\n        :\r\n            setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:event.target.value}\r\n            })            \r\n    }\r\n    \r\n    const checkLiked = (like) =>{\r\n        \r\n        return JSON.parse(like).email!==user.email.toUpperCase()\r\n    }\r\n\r\n    const addLike = (i,currentId) => {\r\n        let contains=true\r\n        \r\n        if (publicStatus){\r\n            const newArr = [...pastPublicMessages]   \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            \r\n            if (!newArr[i].likes||contains ){\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'publicmessages'\r\n                            })\r\n            \r\n            }else{\r\n                socket.emit('dislike',{\r\n                        name:user.name,\r\n                        email:user.email,\r\n                        id:currentId,\r\n                        database:'publicmessages'\r\n                        })\r\n            \r\n            }\r\n        }else if (!publicStatus){\r\n            const newArr = [...filteredMessages]\r\n            \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            if (!newArr[i].likes || contains){\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n            }else{\r\n                socket.emit('dislike',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n                }           \r\n            }\r\n    }\r\n\r\n    \r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenStatus({\r\n                            picture:\"\",\r\n                            message:\"textareahide\",\r\n                            button:\"textareahide\",\r\n                            submit:\"\",\r\n                            position:' right'\r\n                        })\r\n        }else{\r\n            setHiddenStatus({\r\n                            picture:\"textareahide\",\r\n                            message:\"\",\r\n                            button:\"textareahide\",\r\n                            submit:\"\",\r\n                            position:' right'\r\n                        })\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenStatus({\r\n                        picture:\"textareahide\",\r\n                        message:\"textareahide\",\r\n                        button:\"\",\r\n                        submit:\"textareahide\",\r\n                        position:' middle'\r\n                    })\r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:''}\r\n            })\r\n        :\r\n            setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:''}\r\n            })\r\n    }\r\n\r\n    return(\r\n        <div className = \"maincomment\">                \r\n            {publicStatus?\r\n                <>            \r\n                    <div className = \"inputbox\">          \r\n                        <div>\r\n                            <input \r\n                                id = \"pic\" \r\n                                className = {\"textareapic public \"+hiddenStatus.picture} \r\n                                cols=\"40\" rows=\"6\" \r\n                                onChange = {onInputChange} \r\n                                placeholder = \"Enter Picture URL\" \r\n                                value = {currentPublicMessage.message} \r\n                                autoFocus>\r\n                            </input>\r\n\r\n                            <textarea \r\n                                id=\"msg\" \r\n                                className = {\"textarea public \"+hiddenStatus.message}  \r\n                                onChange = {onInputChange} \r\n                                value = {currentPublicMessage.message} \r\n                                autoFocus>                                    \r\n                            </textarea>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">                \r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>\r\n                                    Submit\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {goBack}>\r\n                                    Back\r\n                            </label>  \r\n\r\n                            <label \r\n                                htmlFor=\"msg\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(false)}>\r\n                                    Message\r\n                            </label>\r\n\r\n                            <label \r\n                                htmlFor =\"pic\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(true)}>\r\n                                    Picture\r\n                            </label>                            \r\n                        </div>\r\n           \r\n                        <div className=\"bigbox\">\r\n                            {pastPublicMessages.map((msg,i)=>{\r\n                                const currentUser = pastPublicMessages.length - 1 -i\r\n                                const currentId = pastPublicMessages[currentUser].id   \r\n                                          \r\n                                return <div key = {i}>\r\n                                    <Messagebox \r\n                                        filteredMessages = {pastPublicMessages} \r\n                                        currentUser = {user.email} \r\n                                        email = {pastPublicMessages[currentUser].email} \r\n                                        text ={pastPublicMessages[currentUser].message} \r\n                                        time = {pastPublicMessages[currentUser].time} \r\n                                        i = {currentUser} \r\n                                        currentId = {currentId}\r\n                                        deletePost = {deletePost} \r\n                                        route={route} \r\n                                        addLike = {addLike} \r\n                                        likes = {pastPublicMessages[currentUser].likes} \r\n                                        publicStatus = {publicStatus}\r\n                                        addFriend = {addFriend}\r\n                                       \r\n                                    />\r\n                                </div>            \r\n                                })\r\n                            }\r\n                        </div>            \r\n                    </div>        \r\n                </>\r\n                :\r\n                <>\r\n                    <div className = \"inputbox\">\r\n                        <input \r\n                            id = \"friendpic\"\r\n                            className = {\"textareapic friend \"+hiddenStatus.picture}  \r\n                            onChange = {onInputChange} \r\n                            placeholder = \"Enter Picture URL\"\r\n                            value = {currentMessage.message}\r\n                        ></input>\r\n                        <textarea\r\n                            id = \"friendmsg\" \r\n                            className = {\"textarea friend \"+hiddenStatus.message} \r\n                            onChange = {onInputChange} \r\n                            value = {currentMessage.message}\r\n                        ></textarea>  \r\n                    </div>\r\n                    \r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">\r\n                            <label \r\n                                htmlFor =\"friendmsg\" \r\n                                className = {\"msg \"+hiddenStatus.button} \r\n                                onClick = {()=>changeHidden(false)}>\r\n                                    Message\r\n                            </label>\r\n\r\n                            <label \r\n                                htmlFor = \"friendpic\" \r\n                                className = {\"msg \"+hiddenStatus.button}\r\n                                onClick = {()=>changeHidden(true)}>\r\n                                    Picture\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>\r\n                                    Submit\r\n                            </label>\r\n\r\n                            <label \r\n                                className = {\"msg \"+hiddenStatus.submit} \r\n                                onClick = {goBack}>\r\n                                    Back\r\n                            </label>\r\n\r\n                        </div>                \r\n                        <div className=\"bigbox\"> \r\n                        {filteredMessages.length>0?<></>\r\n                            :\r\n                            <h1>Write a message that only your friends can see</h1>}\r\n                                          \r\n                            {filteredMessages.map((message,i)=>{    \r\n                                           \r\n                                const currentUser = filteredMessages.length -1-i\r\n                                const currentId = filteredMessages[currentUser].id                    \r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()\r\n                                        ?offset=\"sender\"\r\n                                        :offset=\"recipient\";\r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()\r\n                                        ?background=\"senderbackground\"\r\n                                        :background=\"\";                                \r\n                                return <div key ={i} className = {offset}>\r\n                                            <Messagebox \r\n                                                filteredMessages = {filteredMessages} \r\n                                                currentUser = {user.email} \r\n                                                email = {filteredMessages[currentUser].email} \r\n                                                text ={filteredMessages[currentUser].message} \r\n                                                time = {filteredMessages[currentUser].time} \r\n                                                i = {currentUser} \r\n                                                currentId = {currentId}\r\n                                                deletePost = {deletePost} \r\n                                                route={route} \r\n                                                addLike = {addLike} \r\n                                                likes = {filteredMessages[currentUser].likes} \r\n                                                publicStatus = {publicStatus}\r\n                                                addFriend = {addFriend}\r\n                                                background = {background}\r\n                                            />\r\n                                        </div>\r\n                                })\r\n                            }\r\n                        </div>  \r\n                    </div>\r\n                </>\r\n            }            \r\n        </div>\r\n        )\r\n    }\r\n    \r\n\r\n\r\nexport default Messages;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colorScheme.css';\r\n\r\nconst Friend = ({friend,converse, route,unFriend,pendOrReq,i}) => {\r\n  \r\n    return(\r\n        \r\n        <div className = \"radioButton\" key={i}>\r\n            {route==='mail'?\r\n                <li>\r\n                    <input \r\n                        type = \"radio\" \r\n                        name = \"friend\" \r\n                        id={friend} \r\n                        onClick = {()=>converse(friend)}\r\n                    />\r\n                    <label className=\"contact\" htmlFor={friend}>\r\n                        {friend}\r\n                    </label>\r\n                </li>\r\n       \r\n            :\r\n                <li>\r\n                    <input \r\n                        type = \"radio\" \r\n                        name = \"friend\" \r\n                        id={friend} \r\n                        onClick = {()=>converse(friend)}\r\n                    />\r\n                    <label className=\"contact\" htmlFor={friend}>{friend}</label>\r\n                    <button \r\n                        className = \"friendButton\" \r\n                        onClick = {()=>unFriend(friend,pendOrReq)}>\r\n                            Delete\r\n                    </button>\r\n                </li>\r\n       \r\n            }\r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Friend;","import React, { useState, useEffect } from 'react';\r\nimport Messagebox from '../Messages/Messagebox';\r\nimport Friend from '../Friends/Friend';\r\nimport './Mail.css';\r\nimport '../../colorScheme.css';\r\nimport socket from '../../socket';\r\n\r\nconst Mail = ({privateMessage, setPrivateMessage, \r\n                privateMessages, user,\r\n                conversation, converse, \r\n                route, unread,\r\n                onRouteChange\r\n            }) => {\r\n\r\n    const [hiddenMailStatus,setHiddenMailStatus] = useState({\r\n                                                                picture:\"textareahide\",\r\n                                                                message:\"textareahide\",\r\n                                                                button:\"\",\r\n                                                                submit:\"textareahide\"\r\n                                                            })\r\n    let offset=''\r\n    let background=''\r\n    \r\n\r\n    useEffect(()=>{\r\n        const currentTime = privateMessage.time\r\n\r\n        if (privateMessage.message!==''){\r\n            socket.emit('privatemessage',{\r\n                        name:user.name,\r\n                        senderemail:user.email,\r\n                        recipientemail:conversation.you,\r\n                        message:privateMessage.message,\r\n                        time:currentTime\r\n                        })\r\n            }\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,name:'',message:'',time:''}})  \r\n    },[privateMessage.time])\r\n\r\n\r\n    const onChanges= (event) =>{\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,message:event.target.value}\r\n            })\r\n        }\r\n      \r\n\r\n    const onSend = (picture) => {\r\n        let date = new Date\r\n        const timeNow =  date.toLocaleString(\"en-US\", {\r\n            timeZone: `America/New_York`\r\n          });\r\n        if(picture &&(privateMessage.message!=='')){\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,message:'#img#'+privateMessage.message}\r\n            })\r\n          }\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,time:timeNow}\r\n        })\r\n          setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n      }\r\n\r\n    const deleteMail = (currentId) => {  \r\n        socket.emit('deletemail',{\r\n                    id:currentId,\r\n                    database:'privatemessage'\r\n                    })\r\n      }\r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenMailStatus({picture:\"\",message:\"textareahide\",button:\"textareahide\",submit:\"\"})\r\n        }else{\r\n            setHiddenMailStatus({picture:\"textareahide\",message:\"\",button:\"textareahide\",submit:\"\"})\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n        \r\n        setPrivateMessage((prevCurrentPrivateMessage)=>{\r\n            return {...prevCurrentPrivateMessage,message:''}})        \r\n    }\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <div className = \"mailbox\">\r\n            \r\n            {conversation.you?\r\n            <div>\r\n                <div>        \r\n                    <input \r\n                        id = \"picture\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.picture} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        placeholder = \"Enter Picture URL\" \r\n                        value = {privateMessage.message}\r\n                    ></input>\r\n                    <textarea \r\n                        id = \"mail\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.message} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        value = {privateMessage.message}\r\n                    ></textarea>\r\n                    <div className = \"mailButtons\">\r\n\r\n                        <label \r\n                            htmlFor = \"mail\" \r\n                            className = {\"buttons \"+hiddenMailStatus.button} \r\n                            onClick = {()=>changeHidden(false)}>\r\n                                Message\r\n                        </label>\r\n\r\n                        <label \r\n                            htmlFor = \"picture\" \r\n                            className = {\"buttons \"+hiddenMailStatus.button} \r\n                            onClick = {()=>changeHidden(true)}>\r\n                                Picture\r\n                        </label>\r\n\r\n                        <label \r\n                            className = {\"buttons \"+hiddenMailStatus.submit} \r\n                            onClick = {()=>onSend(hiddenMailStatus.picture===\"\")}>\r\n                                Submit\r\n                        </label>\r\n\r\n                        <label \r\n                            className = {\"buttons \"+hiddenMailStatus.submit} \r\n                            onClick = {goBack}>\r\n                                Back\r\n                        </label>\r\n\r\n                    </div>\r\n                    <div className = \"privateMessage\">\r\n                        <button className = \"backButton\" onClick = {()=>onRouteChange('mail')}>&lt;</button>\r\n                        <p className = \"contactName\">{conversation.you}</p>\r\n                    </div>    \r\n                </div>\r\n                <div className = \"messages\">  \r\n                {console.log(conversation,privateMessages)}             \r\n                {privateMessages.map((message,i)=>{\r\n                    const currentMessage = privateMessages.length-1-i\r\n                    const currentId = privateMessages[currentMessage].id\r\n                    if (((privateMessages[currentMessage].recipientemail.toUpperCase() === conversation.you\r\n                        &&privateMessages[currentMessage].senderemail.toUpperCase() === user.email)\r\n                            ||(privateMessages[currentMessage].senderemail.toUpperCase() ===conversation.you\r\n                            &&privateMessages[currentMessage].recipientemail.toUpperCase() === user.email)\r\n                            ))\r\n                            {    \r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()\r\n                                    ?offset=\"sender\"\r\n                                    :offset=\"recipient\";\r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()\r\n                                    ?background=\"senderbackground\" \r\n                                    :background=\"\";\r\n                                return <div className = {offset} key={i}>\r\n                                    \r\n                                            <Messagebox email = {privateMessages[currentMessage].senderemail} \r\n                                            text ={privateMessages[currentMessage].message} \r\n                                            time = {privateMessages[currentMessage].time} \r\n                                            i = {i}\r\n                                            deleteMail = {deleteMail} \r\n                                            currentId = {currentId}\r\n                                            background = {background} \r\n                                            />\r\n                                        </div>\r\n                            }\r\n                    \r\n                    })\r\n                }\r\n            </div> \r\n            </div>\r\n                :\r\n                <div className = 'nocontactContainer'>\r\n                    <p className = \"contactName\">Select a contact to message</p>\r\n                                            <ul className = \"contactScroll\">                            \r\n                                                {unread?.map((friend,i)=>{\r\n                                                    return <div className = \"unreadMessageContainer\" key ={i}>\r\n\r\n                                                        <Friend \r\n                                                            converse = {converse} \r\n                                                            friend = {friend.senderemail} \r\n                                                            route={route} \r\n                                                        />\r\n\r\n                                                        {friend.total-friend.read>0\r\n                                                            ?<span className = \"unreadMessage\">\r\n                                                                {friend.total-friend.read}\r\n                                                            </span>\r\n                                                            :<></>\r\n                                                        }\r\n                                                      \r\n                                                        </div>\r\n                                                    })\r\n                                                }\r\n                                             </ul>\r\n    \r\n                                        \r\n                    \r\n                </div>\r\n            }\r\n                       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mail;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colorScheme.css';\r\n\r\nconst Request = ({friend, rejectFriend,acceptFriend,pendOrReq,i}) => {\r\n \r\n    return(\r\n        <div className = \"radioButton\" key={i}>\r\n            <li>\r\n                <input \r\n                    type = \"radio\" \r\n                    name = \"friend\" \r\n                    id={friend} \r\n                />\r\n                <label \r\n                    className=\"contact\"\r\n                    htmlFor={friend}>{friend}</label>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>acceptFriend(friend)}>\r\n                        Accept\r\n                </button>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>rejectFriend(friend,pendOrReq)}>\r\n                        Decline\r\n                </button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Request;","import React from 'react';\r\nimport './Friends.css';\r\nimport '../../colorScheme.css';\r\n\r\nconst Pending = ({friend, rejectFriend,pendOrReq,i}) => {\r\n    \r\n    return(\r\n        <div className = \"radioButton\" key={i}>\r\n             <li>\r\n                 <input \r\n                    type = \"radio\" \r\n                    name = \"friend\" \r\n                    id={friend} \r\n                />\r\n                <label className=\"contact\" htmlFor={friend}>{friend}</label>\r\n                <button \r\n                    className = \"friendButton\" \r\n                    onClick = {()=>rejectFriend(friend,pendOrReq)}>\r\n                        Undo\r\n                </button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pending;","import React, {useState,useEffect} from 'react';\r\nimport Friend from './Friend';\r\nimport Request from './Request';\r\nimport Pending from './Pending';\r\nimport './Friends.css';\r\nimport '../../colorScheme.css';\r\n\r\n\r\nconst Friends = ({user,addFriend,converse}) => {\r\n    \r\n   \r\n    const { requests, pendingrequests } = user\r\n\r\n    const unFriend = (friend) =>{\r\n        \r\n        fetch('https://socially-distanced-server.herokuapp.com/unfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend.toUpperCase()\r\n                })\r\n            })\r\n            .catch(err=>console.log(err))\r\n    }\r\n\r\n    const acceptFriend = (friend) =>{        \r\n        fetch('https://socially-distanced-server.herokuapp.com/acceptfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend\r\n                })\r\n            })\r\n            .catch(err=>console.log(err))\r\n    }\r\n\r\n\r\n    const rejectFriend = (friend,pendOrReq) =>{      \r\n        if (pendOrReq==='Request'){\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:user.email,\r\n                    friend:friend,\r\n                    option:'request'\r\n                    })\r\n                })\r\n                .catch(err=>console.log(err))\r\n        }else{\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:friend,\r\n                    friend:user.email,\r\n                    option:'pending'\r\n                }\r\n                    )\r\n                })\r\n                .catch(err=>console.log(err))\r\n            }\r\n        \r\n        \r\n    }\r\n\r\n    const { friends } = user\r\n    \r\n    return(\r\n            \r\n        <div className = \"maincomment\">    \r\n                <div className=\"mainFriend\">\r\n                            <div  className=\"\">\r\n                                <div >\r\n                        \r\n                                    {friends?\r\n                                    <div>\r\n                                        <div className=\"friendtitlebox\"><p className=\"requesttitle\">Contacts</p></div>\r\n                                            <ul className = \"scroll \">                            \r\n                                                {friends.map((friend,i)=>{\r\n                                                    return <Friend \r\n                                                                converse = {converse} \r\n                                                                friend = {friend} \r\n                                                                unFriend = {unFriend}\r\n                                                                i={i} \r\n                                                            />\r\n                                                    })\r\n                                                }\r\n                                             </ul>    \r\n                                        </div>                                       \r\n                                        :<></>\r\n                                     }                        \r\n            \r\n                                    <button \r\n                                        className = \"addFriend\" \r\n                                        onClick = {()=>addFriend(\"No Names\")}>\r\n                                            Add Contact\r\n                                    </button>\r\n\r\n                                </div>                        \r\n                              \r\n                                {requests?\r\n                                requests.length?\r\n                                    <div className = \"scroll\">  \r\n                                        <div className=\"friendtitlebox\"><p className=\"requesttitle\">Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {requests.map((friend,i)=>{\r\n                                                return <Request \r\n                                                            friend = {friend} \r\n                                                            rejectFriend = {rejectFriend} \r\n                                                            pendOrReq ={'Request'} \r\n                                                            acceptFriend = {acceptFriend}\r\n                                                            i={i}\r\n                                                        />\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    :<></>:<></>\r\n                                }\r\n                                \r\n                                {pendingrequests?\r\n                                pendingrequests.length?\r\n                                    <div className = \"scroll\">\r\n                                        <div className=\"friendtitlebox\"><p className=\"pendingtitle\">Pending Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {pendingrequests.map((friend,i)=>{\r\n                                                return <Pending \r\n                                                            friend = {friend} \r\n                                                            rejectFriend = {rejectFriend} \r\n                                                            pendOrReq = {'Pending'}\r\n                                                            i={i}\r\n                                                        />\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n        \r\n                                    </div>\r\n                                    :<></>:<></>\r\n                                }\r\n                        \r\n                            </div>\r\n                </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Friends;","import React, { useState, useEffect } from 'react';\r\nimport Login from './component/Login/Login';\r\nimport Navigation from './component/Navigation/Navigation';\r\nimport Messages from './component/Messages/Messages';\r\nimport Mail from './component/Mail/Mail';\r\nimport Friends from './component/Friends/Friends';\r\nimport socket from './socket'\r\nimport './App.css';\r\nimport './colorScheme.css';\r\n\r\n// https://socially-distanced-server.herokuapp.com/\r\n\r\nfunction App() {\r\n  const [user,setUser] = useState({name:'',email:'',friends:[],request:[],pendingrequests:[]})\r\n  const [password,setPassword] = useState('')\r\n  const [route,setRoute] = useState('Sign In')\r\n  const [isSignedIn,setIsSignedIn] = useState(false)\r\n  const [errorMessage,setErrorMessage] = useState('')\r\n  const [pastMessages,setPastMessages] = useState([])\r\n  const [currentMessage, setCurrentMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [pastPublicMessages,setPastPublicMessages] = useState([])\r\n  const [currentPublicMessage, setCurrentPublicMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [privateMessages,setPrivateMessages] = useState([])\r\n  const [privateMessage, setPrivateMessage] = useState({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n  const [conversation,setConversation] = useState({me:'',you:''})\r\n  const [filteredMessages,setFilteredMessages] = useState({})\r\n  const [publicStatus,setPublicStatus] = useState(true);\r\n  const myEmail = user.email\r\n  const [unread,setUnread] = useState([])\r\n  const [totalMessages,setTotalMessages] = useState(0)\r\n\r\n    useEffect(()=>{\r\n      setTotalMessages(unread.reduce((acc,message)=>{\r\n   \r\n        return acc+message.total-message.read\r\n      },0))\r\n      \r\n    },[unread])\r\n  \r\n  useEffect(()=>{\r\n    socket.on('friendrequest',data=>{\r\n      if (data[0].email===myEmail){\r\n        setUser(data[0])\r\n        \r\n      }\r\n      return ()=>{\r\n\r\n        socket.off('friendrequest')\r\n      }\r\n    })\r\n  },[myEmail])\r\n\r\n  useEffect(()=>{\r\n    socket.on('unfriend',data=>{\r\n      \r\n      if (data.email===myEmail){\r\n        setUser(data.message[0])\r\n      }\r\n      loadData('privatemessageload',\r\n        JSON.stringify({\r\n          email: myEmail,\r\n          friends:user.friends\r\n        }),\r\n        setPrivateMessages\r\n      ) \r\n      socket.emit('loadRead',{recipientemail:data.email})\r\n      \r\n    })\r\n    return ()=>{\r\n      socket.off('unfriend')\r\n      \r\n    }\r\n  },[myEmail,user])\r\n  \r\n  useEffect(()=>{\r\n    socket.on('reject',data=>{\r\n      \r\n      if (data[0].email===myEmail){        \r\n        setUser(data[0])\r\n      }\r\n    })\r\n    return ()=>{\r\n      socket.off('reject')\r\n    }\r\n  },[myEmail])\r\n\r\n  useEffect(()=>{\r\n    socket.on('acceptfriend',data=>{\r\n      if (data.user[0].email===myEmail){\r\n        setUser(data.user[0])\r\n        setUnread((prevUnread)=>{\r\n          return [...prevUnread,{senderemail:data.friend,recipientemail:data.user[0].email,total:0,read:0}]\r\n        })\r\n      }\r\n    })\r\n      return ()=>{\r\n        socket.off('acceptfriend')\r\n      }\r\n  },[myEmail])\r\n\r\nuseEffect(()=>{\r\n  socket.on('updateReadStatus',data=>{\r\n    if (data[0]?.recipientemail===myEmail.toUpperCase()||!data[0]){\r\n      setUnread(data)\r\n    }\r\n  })\r\n  return ()=>{\r\n    socket.off('updateReadStatus')\r\n  }\r\n},[myEmail])\r\n\r\nuseEffect(()=>{\r\n  socket.on('update',(data)=>{\r\n    if (data[0]?.recipientemail===myEmail.toUpperCase()||!data[0]){  \r\n      setUnread(data)\r\n    }\r\n  })\r\n  return ()=>{\r\n    socket.off('update')\r\n  }\r\n},[myEmail])\r\n\r\nuseEffect(()=>{\r\n  socket.on('privatemessage',(data)=>{\r\n      loadData('privatemessageload',\r\n        JSON.stringify({\r\n          email: user.email.toUpperCase(),\r\n          friends:user.friends\r\n        }),\r\n        setPrivateMessages\r\n      )  \r\n    if (privateMessage.recipientEmail===data?.senderemail){\r\n      socket.emit('read',{senderemail:data.senderemail ,recipientemail:data.recipientemail})\r\n    }else{\r\n      socket.emit('loadRead',{recipientemail:user.email.toUpperCase()})\r\n    }\r\n  })\r\n  return ()=>{\r\n    socket.off('privatemessage')\r\n  }\r\n},[privateMessages,privateMessage,user])\r\n\r\nuseEffect(()=>{\r\n  socket.on('privatemessage',(data)=>{\r\n      loadData('privatemessageload',\r\n        JSON.stringify({\r\n          email: user.email.toUpperCase(),\r\n          friends:user.friends\r\n        }),\r\n        setPrivateMessages\r\n      )  \r\n    if (privateMessage.recipientEmail===data?.senderemail){\r\n      socket.emit('read',{senderemail:data.senderemail ,recipientemail:data.recipientemail})\r\n    }else{\r\n      socket.emit('loadRead',{recipientemail:user.email.toUpperCase()})\r\n    }\r\n  })\r\n  return ()=>{\r\n    socket.off('privatemessage')\r\n  }\r\n},[])\r\n  useEffect(()=>{\r\n      socket.on('publicmessage',(data)=>{\r\n        setPastPublicMessages(data)\r\n      })\r\n      return ()=>{\r\n        socket.off('publicmessage')\r\n      }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n\r\n    socket.on('friendmessage',(data)=>{\r\n  \r\n      setPastMessages(data)\r\n    })\r\n    return ()=>{\r\n      socket.off('friendmessage')\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    socket.on('publiclikes',data=>{\r\n      setPastPublicMessages(data)\r\n    })\r\n    return ()=>{\r\n      socket.off('publiclikes')\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    socket.on('friendlikes',data=>{\r\n      setPastMessages(data)\r\n    })\r\n    return ()=>{\r\n      socket.off('friendlikes')\r\n    }\r\n  },[])\r\n// socket.on('publicdislike',data=>{\r\n//     setPastPublicMessages(data)\r\n// })\r\n// socket.on('frienddislike',data=>{\r\n//   setPastMessages(data)\r\n// })\r\n// socket.on('publicdeletemessage',data=>{\r\n//     setPastPublicMessages(data)\r\n// })\r\n// socket.on('frienddeletemessage',data=>{\r\n//     setPastMessages(data)\r\n// })\r\n// socket.on('deletemail',data=>{\r\n//     setPrivateMessages(data)\r\n// })\r\n\r\n\r\n\r\n\r\n  useEffect (()=>{\r\n    if (user.friends){\r\n      setFilteredMessages(()=>{\r\n        return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))})\r\n    } \r\n  },[])\r\n\r\n  useEffect (()=>{\r\n    \r\n    const signedInStatus = window.localStorage.getItem('isSignedIn')\r\n    const loadedStatus = JSON.parse(signedInStatus)\r\n    console.log(loadedStatus)\r\n    setIsSignedIn(loadedStatus)\r\n    if(loadedStatus){\r\n      const initialRoute = window.localStorage.getItem('route')\r\n      const loadedRoute = JSON.parse(initialRoute)\r\n      setRoute(loadedRoute)\r\n\r\n      const getUser = window.localStorage.getItem('user')\r\n      const loadedUser = JSON.parse(getUser)\r\n      console.log(loadedUser)\r\n      setUser(loadedUser)\r\n\r\n      const getConversation = window.localStorage.getItem('conversation')\r\n      const loadedConversation = JSON.parse(getConversation)\r\n      setConversation(loadedConversation)\r\n\r\n      const getUnread = window.localStorage.getItem('unread')\r\n      const loadedUnread = JSON.parse(getUnread)\r\n      setUnread(loadedUnread)\r\n\r\n      const getPublicStatus = window.localStorage.getItem('publicStatus')\r\n      const loadedPublicStatus = JSON.parse(getPublicStatus)\r\n      setPublicStatus(loadedPublicStatus)\r\n\r\n     \r\n\r\n      loadData('friendmessageload',\r\n                JSON.stringify({\r\n                  email:user.email.toUpperCase(),\r\n                  friends:user.friends\r\n                }),\r\n                setPastMessages\r\n              )\r\n              loadData('publicmessageload',\r\n                JSON.stringify({\r\n                    email:user.email.toUpperCase(),\r\n                    friends:user.friends\r\n                }),\r\n                setPastPublicMessages\r\n              )\r\n\r\n              loadData('privatemessageload',\r\n                JSON.stringify({\r\n                  email: user.email.toUpperCase(),\r\n                  friends:user.friends\r\n                }),\r\n                setPrivateMessages\r\n              )    \r\n              }\r\n  },[])\r\n\r\n  // console.log(user)\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('route',JSON.stringify(route))\r\n  },[route])\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('user',JSON.stringify(user))\r\n  },[user])\r\n\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('conversation',JSON.stringify(conversation))\r\n  },[conversation])\r\n\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('unread',JSON.stringify(unread))\r\n  },[unread])\r\n\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('publicStatus',JSON.stringify(publicStatus))\r\n  },[publicStatus])\r\n  \r\n \r\n\r\n  const resetState = () => {\r\n    setRoute('Sign In')\r\n    setIsSignedIn(false)\r\n    setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n    setCurrentMessage({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n    setPrivateMessage({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n    setConversation({me:'',you:''})\r\n    setPublicStatus(true)\r\n    setErrorMessage('')\r\n    setPassword('')\r\n  }\r\n\r\n  useEffect (()=>{\r\n    window.localStorage.setItem('isSignedIn',JSON.stringify(isSignedIn))\r\n    console.log(isSignedIn)\r\n    \r\n  },[isSignedIn])\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n  const onRouteChange = (route) => {    \r\n    if (route==='mail'){\r\n      setConversation(prevConversation=>{\r\n        return {...prevConversation,you:''}\r\n      })\r\n      setPrivateMessage(prevPrivateMessage=>{\r\n        return {...prevPrivateMessage,recipientEmail:''}\r\n      })\r\n    }\r\n    (route === 'home' || route ==='mail' || route ==='friends' || route===\"friend\" )?setIsSignedIn(true):resetState();\r\n    setRoute(route)\r\n  }\r\n  \r\n\r\n  const loadData = (location,info,infoUpdate) =>{\r\n    fetch(`https://socially-distanced-server.herokuapp.com/${location}`,{\r\n          method:'post',\r\n          headers:{'Content-Type':'application/json'},\r\n          body:info\r\n          })\r\n          .then(res=>res.json())\r\n          .then(res=>{\r\n              infoUpdate(res)})\r\n          .catch(err=>console.log(err))\r\n          \r\n  }\r\n\r\n\r\n  const deletePost = (publicStatus,currentId) => {\r\n    if (publicStatus){\r\n      socket.emit('deletemessage',{\r\n                id:currentId,\r\n                database:'publicmessages'\r\n                })\r\n    }else{\r\n      socket.emit('deletemessage',{\r\n        id:currentId,\r\n        database:'friendmessage'\r\n        })\r\n  }}\r\n\r\n  const addFriend = (newFriend) => {\r\n    \r\n    if (newFriend===\"No Names\"){\r\n      newFriend = prompt('Enter the email address of your friend ')\r\n    }\r\n    \r\n    if (newFriend){\r\n        if (!user.friends\r\n            ||!user.friends.includes(newFriend)\r\n            ||!user.pendingrequests.includes(newFriend)\r\n            ||!user.request.includes(newFriend)\r\n            ){\r\n          fetch('https://socially-distanced-server.herokuapp.com/friendrequest',{\r\n              method:'post',\r\n              headers:{'Content-Type':'application/json'},\r\n              body:JSON.stringify({\r\n                  email:user.email,\r\n                  newFriend:newFriend.toUpperCase()\r\n                  })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(res=>{    \r\n                \r\n                alert(`Friend request sent to ${newFriend.toUpperCase()}.`)\r\n                \r\n                  \r\n            }).catch(err=>console.log(err))\r\n            \r\n          }\r\n    }\r\n   \r\n  }\r\n\r\n  \r\n  const changePublicStatus = (route,publicState) => {\r\n    setPublicStatus(publicState)\r\n    onRouteChange(route)\r\n    \r\n}\r\n\r\nconst converse = (friend) => {\r\n  setConversation((prevConversation)=>{\r\n      return {...prevConversation,you:friend}\r\n  })\r\n  setPrivateMessage((prevPrivateMessage)=>{\r\n      return {...prevPrivateMessage,recipientEmail:friend}\r\n  })\r\n  setRoute('mail')\r\n  socket.emit('read',{senderemail:friend,recipientemail:user.email})\r\n \r\n}\r\n       \r\n \r\n\r\n  return (\r\n    <div className=\"App\">      \r\n        <Navigation \r\n            onRouteChange = {onRouteChange} \r\n            isSignedIn = {isSignedIn}\r\n            route={route}\r\n            user = {user} \r\n            changePublicStatus = {changePublicStatus}\r\n            totalMessages = {totalMessages}\r\n        />\r\n    \r\n        {isSignedIn\r\n            ? (route==='home'||route==='friend'\r\n                  ?<div className = \"main\">\r\n                        <div className = \"mainMessage\">\r\n                            <Messages \r\n                                user = {user} \r\n                                route = {route}\r\n                                deletePost = {deletePost}\r\n                                currentMessage = {currentMessage}\r\n                                setCurrentMessage = {setCurrentMessage}\r\n                                pastMessages = {pastMessages}\r\n                                currentPublicMessage = {currentPublicMessage}\r\n                                setCurrentPublicMessage = {setCurrentPublicMessage}\r\n                                pastPublicMessages = {pastPublicMessages}\r\n                                addFriend = {addFriend}\r\n                                setFilteredMessages = {setFilteredMessages}\r\n                                filteredMessages = {filteredMessages}\r\n                                publicStatus = {publicStatus}\r\n                              />\r\n                        </div>\r\n                  </div>\r\n                  :route==='mail'?\r\n                  <div className = \"main\">\r\n                      <div className = \"mainMessage\">\r\n                          <Mail \r\n                              user ={user} \r\n                              privateMessage = {privateMessage} \r\n                              setPrivateMessage = {setPrivateMessage} \r\n                              privateMessages = {privateMessages} \r\n                              conversation = {conversation}\r\n                              converse = {converse}\r\n                              route = {route}\r\n                              unread = {unread}\r\n                              onRouteChange = {onRouteChange}\r\n                            /> \r\n                      </div>\r\n                  </div>\r\n                  :\r\n                  \r\n                        <Friends \r\n                            user = {user}                           \r\n                            addFriend = {addFriend}                            \r\n                            converse = {converse}\r\n                            \r\n                        />\r\n                  )\r\n        \r\n            :(<>\r\n                <Login \r\n                    user = {user}\r\n                    route = {route} \r\n                    errorMessage = {errorMessage}\r\n                    setUser = {setUser}\r\n                    setRoute = {setRoute}\r\n                    setErrorMessage = {setErrorMessage}\r\n                    setIsSignedIn = {setIsSignedIn}\r\n                    onRouteChange = {onRouteChange}            \r\n                    setCurrentMessage = {setCurrentMessage}                    \r\n                    setPrivateMessages = {setPrivateMessages}\r\n                    setPastMessages = {setPastMessages}                    \r\n                    setPastPublicMessages = {setPastPublicMessages}\r\n                    setConversation = {setConversation}                   \r\n                    loadData = {loadData}\r\n                    password = {password}\r\n                    setPassword = {setPassword}\r\n                    \r\n                  \r\n                    />          \r\n                </>\r\n              )\r\n        }\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './colorScheme.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}