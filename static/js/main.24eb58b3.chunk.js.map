{"version":3,"sources":["component/Login/Inputblock.js","socket.js","component/Login/Login.js","images/hamburger.png","images/home.png","component/Friends/Friend.js","component/Friends/Request.js","component/Friends/Pending.js","component/Friends/Friends.js","images/friend.png","component/Navigation/Navigation.js","component/Messages/Picture.js","images/like.png","images/liked.png","component/Messages/Messagebox.js","component/Messages/Messages.js","component/Mail/Mail.js","App.js","reportWebVitals.js","index.js"],"names":["Inputblock","inputType","onChanges","value","className","htmlFor","type","name","id","onChange","socket","io","Login","user","route","errorMessage","setRoute","setUser","setErrorMessage","setIsSignedIn","onRouteChange","setCurrentMessage","setPrivateMessages","pastMessages","setConversation","setCurrentPublicMessage","setPrivatePublicMessage","setPastMessages","setPastPublicMessages","loadData","setFilteredMessages","filteredMessages","password","setPassword","email","event","target","prevUser","console","log","onClick","upperEmail","toUpperCase","fetch","method","headers","body","JSON","stringify","then","res","json","prevCurrentMessage","me","you","friends","requests","pendingrequests","catch","err","verifyLogin","test","length","verifyRegistration","Friend","friend","converse","unFriend","pendOrReq","Request","rejectFriend","acceptFriend","Pending","Friends","addFriend","setPrivateMessage","useState","Set","uniqueRequests","setUniqueRequests","uniquePending","setUniquePending","useEffect","option","map","Navigation","isSignedIn","changePublicStatus","conversation","publicStatus","setPublicStatus","privateMessages","hideStatus","setHideStatus","hide","src","Hamburger","alt","width","Picture","source","Messagebox","text","time","i","deletePost","deleteMail","addLike","currentUser","currentId","background","pastPublicMessages","likes","includes","substr","indexOf","Liked","Like","parse","Messages","currentMessage","currentPublicMessage","picture","message","button","submit","position","hiddenStatus","setHiddenStatus","offset","emit","currentTime","prevCurrentPublicMessage","filter","onSubmit","Date","toLocaleString","onInputChange","checkLiked","like","contains","newArr","every","database","changeHidden","goBack","cols","rows","placeholder","autoFocus","msg","Mail","privateMessage","hiddenMailStatus","setHiddenMailStatus","senderemail","recipientemail","prevPrivateMessage","prevCurrentPrivateMessage","prevConversation","App","request","on","data","off","location","info","infoUpdate","currentIndex","newFriend","prompt","alert","recipientEmail","publicState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0ZAwBeA,EAlBI,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,UAAUC,EAAqB,EAArBA,UAAUC,EAAW,EAAXA,MACrC,OAEI,sBAAKC,UAAU,aAAf,UACI,uBAAOA,UAAU,aAAaC,QAASJ,EAAvC,SAAmDA,IACnD,uBACIG,UAAU,aACVE,KAAOL,EACPM,KAAMN,EACNO,GAAIP,EACJE,MAAOA,EACPM,SAAYP,Q,QCZbQ,EAFAC,aADH,oDC6MGC,EAvMD,SAAC,GAUN,IATLC,EASI,EATJA,KAAKC,EASD,EATCA,MAAMC,EASP,EATOA,aACXC,EAQI,EARJA,SAASC,EAQL,EARKA,QAASC,EAQd,EARcA,gBAClBC,EAOI,EAPJA,cAAcC,EAOV,EAPUA,cACdC,EAMI,EANJA,kBACAC,GAKI,EANeC,aAMf,EALJD,oBACwBE,GAIpB,EALgBC,wBAKhB,EAJJC,wBAII,EAJoBF,iBACxBG,EAGI,EAHJA,gBAAgBC,EAGZ,EAHYA,sBAEhBC,GACI,EAFJC,oBAEI,EAFgBC,iBAEhB,EADJF,UAASG,EACL,EADKA,SAASC,EACd,EADcA,YAGX1B,EAAcM,EAAdN,KAAK2B,EAASrB,EAATqB,MAENhC,EAAW,SAACiC,GACd,OAAQA,EAAMC,OAAO5B,IACnB,IAAK,OACHS,GAAQ,SAACoB,GACL,OAAO,2BAAIA,GAAX,IAAoB9B,KAAK4B,EAAMC,OAAOjC,WACxCmC,QAAQC,IAAI1B,GACd,MACF,IAAK,QACHI,GAAQ,SAACoB,GACL,OAAO,2BAAIA,GAAX,IAAoBH,MAAMC,EAAMC,OAAOjC,WAC3C,MACF,IAAK,WACH8B,EAAYE,EAAMC,OAAOjC,OACzB,MACF,QACImC,QAAQC,IAAIJ,EAAMC,OAAOjC,SAgInC,OACI,8BACI,qBAAKC,UAAU,YAAf,SACI,yBAASA,UAAU,aAAnB,SACI,sBAAKA,UAAY,gBAAjB,UACc,aAARU,EAEE,gCACI,oBAAIV,UAAU,SAAd,sBACA,qBAAKA,UAAU,QAAf,SAAwBW,IACxB,cAAC,EAAD,CAAYd,UAAa,OAAQE,MAAOI,EAAML,UAAYA,IAC1D,cAAC,EAAD,CAAYD,UAAa,QAASE,MAAS+B,EAAOhC,UAAYA,IAC9D,cAAC,EAAD,CAAYD,UAAa,WAAYE,MAAO6B,EAAU9B,UAAYA,OAGtE,gCACI,oBAAIE,UAAU,SAAd,qBACA,qBAAKA,UAAU,QAAf,SAAwBW,IACxB,cAAC,EAAD,CAAYd,UAAa,QAASE,MAAO+B,EAAOhC,UAAYA,IAC5D,cAAC,EAAD,CAAYD,UAAa,WAAYE,MAAO6B,EAAU9B,UAAYA,OAK1E,qBAAKE,UAAU,SAAf,SACI,wBAAQE,KAAO,SAASF,UAAY,SAASoC,QA9BlD,WACf,IAAMC,EAAa5B,EAAKqB,MAAMQ,cACtB,YAAR5B,EAxHgB,SAAC2B,GACjBE,MAAM,yDAAyD,CAC3DC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAClBd,MAAMO,EACNT,SAASA,MAGdiB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACEA,EAAIhB,QAAQO,GACdxB,EAAQiC,GAMRZ,QAAQC,IAAI,QAAQ1B,EAAKqC,GACzBlC,EAAS,QACTG,GAAc,GACdD,EAAgB,IAChBe,EAAY,IACZZ,GAAkB,SAAC+B,GACjB,OAAO,2BAAIA,GAAX,IAA8B7C,KAAK2C,EAAI3C,KAAK2B,MAAMO,OAEpDjB,EAAgB,CAAC6B,GAAGH,EAAIhB,MAAMoB,IAAI,OAIlCpC,EAAgB,6BAChBD,EAAQ,CAACV,KAAK,GAAG2B,MAAM,GAAGqB,QAAQ,GAAGC,SAAS,GAAGC,gBAAgB,KACjExB,EAAY,QAIjByB,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,MAMxB9B,EAAS,oBACCkB,KAAKC,UAAU,CACbd,MAAMO,EACNc,QAAQ1C,EAAK0C,UAEf5B,GAEVE,EAAS,oBACCkB,KAAKC,UAAU,CACXd,MAAMO,EACNc,QAAQ1C,EAAK0C,UAEjB3B,GAGVC,EAAS,qBACCkB,KAAKC,UAAU,CACbd,MAAOO,EACPc,QAAQ1C,EAAK0C,UAEfjC,GA0DQsC,CAAYnB,GArDL,SAACA,GACL,eACAoB,KAAK3B,IAAUF,EAAS8B,QAAQ,GAC/CnB,MAAM,2DAA2D,CAC/DC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAClBzC,KAAKM,EAAKN,KACV2B,MAAMO,EACNT,SAASA,EACTuB,QAAQ1C,EAAK0C,YAGhBN,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAApC,GACO,UAAPA,EACFK,EAAgB,8CAEhBD,EAAQJ,GACRG,EAAS,QACTG,GAAc,GACdD,EAAgB,IAChBe,EAAY,IACZZ,GAAkB,SAAC+B,GACjB,OAAO,2BAAIA,GAAX,IAA8B7C,KAAKM,EAAKN,KAAK2B,MAAMrB,EAAKqB,eAK3DwB,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,MAQxB9B,EAAS,oBACPkB,KAAKC,UAAU,CACXd,MAAMO,EACNc,QAAQ1C,EAAK0C,UAEjB3B,IAEMI,EAAS8B,OAAO,EACxB5C,EAAgB,sCAEhBA,EAAgB,+BAMkB6C,CAAmBtB,IA4BzC,sBAEJ,qBAAKrC,UAAU,SAAf,SACa,YAARU,EACA,mBAAG0B,QAAW,kBAAMpB,EAAc,aAAYhB,UAAU,YAAxD,sBACA,mBAAGoC,QAAW,kBAAMpB,EAAc,YAAYhB,UAAU,YAAxD,iCCnMd,G,MAAA,IAA0B,uC,GCA1B,I,OCsBA4D,G,MAhBA,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,OAAOC,EAAwC,EAAxCA,SAAUpD,EAA8B,EAA9BA,MAAMqD,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,UAE7C,OAEI,qBAAKhE,UAAY,cAAjB,SACa,SAARU,EACD,+BAAI,uBAAOR,KAAO,QAAQC,KAAO,SAASC,GAAIyD,EAAQzB,QAAW,kBAAI0B,EAASD,MAAU,uBAAO5D,QAAS4D,EAAhB,SAAyBA,OAGjH,+BAAI,uBAAO3D,KAAO,QAAQC,KAAO,SAASC,GAAIyD,EAAQzB,QAAW,kBAAI0B,EAASD,MAAU,uBAAO5D,QAAS4D,EAAhB,SAAyBA,IAAe,wBAAQ7D,UAAY,eAAeoC,QAAW,kBAAI2B,EAASF,EAAOG,IAAlE,sBCA7HC,EATC,SAAC,GAAmD,IAAlDJ,EAAiD,EAAjDA,OAAQK,EAAyC,EAAzCA,aAAaC,EAA4B,EAA5BA,aAAaH,EAAe,EAAfA,UAEhD,OACI,qBAAKhE,UAAY,cAAjB,SACK,+BAAI,uBAAOE,KAAO,QAAQC,KAAO,SAASC,GAAIyD,IAAU,uBAAO5D,QAAS4D,EAAhB,SAAyBA,IAAe,wBAAQ7D,UAAY,eAAeoC,QAAW,kBAAI+B,EAAaN,IAA/D,oBAAuF,wBAAQ7D,UAAY,eAAeoC,QAAW,kBAAI8B,EAAaL,EAAOG,IAAtE,qBCKrLI,EATC,SAAC,GAAsC,IAArCP,EAAoC,EAApCA,OAAQK,EAA4B,EAA5BA,aAAaF,EAAe,EAAfA,UAEnC,OACI,qBAAKhE,UAAY,cAAjB,SACK,+BAAI,uBAAOE,KAAO,QAAQC,KAAO,SAASC,GAAIyD,IAAU,uBAAO5D,QAAS4D,EAAhB,SAAyBA,IAAe,wBAAQ7D,UAAY,eAAeoC,QAAW,kBAAI8B,EAAaL,EAAOG,IAAtE,qBC0L9FK,GCpMA,IDcC,SAAC,GAAuG,IAAtG5D,EAAqG,EAArGA,KAA+D6D,GAAsC,EAAhGzD,QAAgG,EAAxF0D,kBAAwF,EAAtE7D,MAAsE,EAAhEE,SAAgE,EAAtDQ,gBAAsD,EAAtCkD,WAAwBR,GAAc,EAA5B9C,cAA4B,EAAd8C,UAErG,EAA2CU,mBAAS,YAAI,IAAIC,IAAJ,OAAQhE,QAAR,IAAQA,OAAR,EAAQA,EAAM2C,YAAtE,mBAAOsB,EAAP,KAAsBC,EAAtB,KACA,EAAyCH,mBAAS,YAAI,IAAIC,IAAJ,OAAQhE,QAAR,IAAQA,OAAR,EAAQA,EAAM4C,mBAApE,mBAAOuB,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACNH,EAAkB,YAAI,IAAIF,IAAIhE,EAAK2C,YACnCyB,EAAiB,YAAI,IAAIJ,IAAIhE,EAAK4C,qBACpC,CAAC5C,IAUH,IAAMsD,EAAW,SAACF,GACd3B,QAAQC,IAAI0B,EAAOpD,EAAKqB,OACxBS,MAAM,2DAA2D,CAC7DC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAChBd,MAAMrB,EAAKqB,MACX+B,OAAOA,EAAOvB,kBAGjBO,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,OAKHQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,OAO5BY,EAAe,SAACN,GAClBtB,MAAM,+DAA+D,CACjEC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAChBd,MAAMrB,EAAKqB,MACX+B,OAAOA,MAGVhB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,OAGHQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,OAQ5BW,EAAe,SAACL,EAAOG,GACT,YAAZA,EACAzB,MAAM,yDAAyD,CAC3DC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAChBd,MAAMrB,EAAKqB,MACX+B,OAAOA,EACPkB,OAAO,cAIVlC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,OAGHQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,MAQ9BhB,MAAM,yDAAyD,CAC3DC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAChBd,MAAM+B,EACNA,OAAOpD,EAAKqB,MACZiD,OAAO,cAIVlC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,OAGHQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,OAY9BJ,EAAY1C,EAAZ0C,QAER,OAEI,qBAAKnD,UAAY,cAAjB,SAIQ,qBAAKA,UAAU,iBAAf,SAGI,qBAAKA,UAAU,GAAf,SACA,qBAAKA,UAAY,GAAjB,SACQ,sBAAMA,UAAU,GAAhB,UACI,gCAGKmD,EACG,8BACI,oBAAInD,UAAY,SAAhB,SACKmD,EAAQ6B,KAAI,SAACnB,GACV,OAAO,cAAC,EAAD,CAAQC,SAAYA,EAAUD,OAAUA,EAAQE,SAAYA,WAM9E,6BAIL,wBAAQ/D,UAAY,YAAYoC,QAAW,kBAAIkC,EAAU,aAAzD,2BAGHI,GAAkBA,EAAe,GAC9B,sBAAK1E,UAAY,SAAjB,UACI,qBAAKA,UAAU,iBAAf,SAAgC,mBAAGA,UAAU,eAAb,uBAChC,oBAAIA,UAAY,SAAhB,SACK0E,EAAeM,KAAI,SAACnB,GACjB,OAAO,cAAC,EAAD,CAASA,OAAUA,EAAQK,aAAgBA,EAAcF,UAAY,UAAWG,aAAgBA,YAKlH,6BAEJS,GAAeA,EAAc,GAC1B,sBAAK5E,UAAY,SAAjB,UACI,qBAAKA,UAAU,iBAAf,SAAgC,mBAAGA,UAAU,eAAb,+BAChC,oBAAIA,UAAY,SAAhB,SACK4E,EAAcI,KAAI,SAACnB,GAChB,OAAO,cAAC,EAAD,CAASA,OAAUA,EAAQK,aAAgBA,EAAcF,UAAa,oBAMxF,0CEjHtBiB,EA3DI,SAAC,GAYf,IAQc,EApBEjE,EAYjB,EAZiBA,cAAekE,EAYhC,EAZgCA,WAAWxE,EAY3C,EAZ2CA,MAC3CD,EAWA,EAXAA,KASA0E,GAEA,EAVAtE,QAUA,EATAD,SASA,EARA2D,kBAQA,EAPAnD,gBAOA,EANAgE,aAMA,EALAd,UAKA,EAJAe,aAIA,EAHAC,gBAGA,EAFAH,oBAIA,GAFA,EADAI,gBAGmCf,mBAAS,WAA5C,mBAAOgB,EAAP,KAAkBC,EAAlB,KAEMC,EAAO,WACaD,EAAT,WAAbD,EAAoC,GAAkB,WAG1D,OAAIN,EAEI,sBAAKlF,UAAY,UAAjB,UACI,qBAAKA,UAAY,QAAjB,kCACA,8BAAK,wBAAQA,UAAY,aAAaoC,QAAWsD,EAA5C,SAAkD,qBAAKC,IAAOC,EAAWC,IAAM,IAAIC,MAAM,cAE9F,sBAAK9F,UAAa,UAAUwF,EAA5B,UACI,wBAAQxF,UAAY,aAAaoC,QAAWsD,EAA5C,mBACI,sBAAK1F,UAAY,iBAAjB,UACI,mBAAGA,UAAY,YAAf,yBACA,sBAAKA,UAAY,sBAAjB,UACI,mBAAGoC,QAAW,kBAAI+C,EAAmB,QAAO,IAAOnF,UAAa,kBAAmBU,EAAnF,oBAAoG,mBAAGV,UAAa,oBAAqBU,EAAO0B,QAAW,kBAAI+C,EAAmB,UAAS,IAAvF,2BAI5G,8BACI,mBAAGnF,UAAa,kBAAmBU,EAAO0B,QAAW,kBAAMpB,EAAc,SAAzE,+BAKJ,qBAAKhB,UAAY,GAAjB,SACI,oBAAGA,UAAa,qBAAsBU,EAAO0B,QAAW,kBAAIpB,EAAc,YAA1E,sBAAmG,OAAJP,QAAI,IAAJA,GAAA,UAAAA,EAAM2C,gBAAN,eAAgBM,QAAO,sBAAM1D,UAAY,WAAlB,SAA8BS,EAAK2C,SAASM,SAAe,kCAErL,qBAAK1D,UAAY,GAAjB,SACA,mBAAGoC,QAAW,kBAAMpB,EAAc,YAAYhB,UAAa,cAA3D,8BAQZ,yBCpDG+F,G,YATC,SAACC,GAEb,OACI,8BACI,qBAAKhG,UAAY,UAAU6F,IAAM,UAAUF,IAAOK,EAAOA,aCPtD,MAA0B,iCCA1B,MAA0B,kCCyE1BC,EAhEI,SAAC,GAAsK,IAApKvF,EAAmK,EAAnKA,MAAMwF,EAA6J,EAA7JA,KAAMpE,EAAuJ,EAAvJA,MAAOqE,EAAgJ,EAAhJA,KAAMC,EAA0I,EAA1IA,EAAGC,EAAuI,EAAvIA,WAAWC,EAA4H,EAA5HA,WAAYC,EAAgH,EAAhHA,QAASC,EAAuG,EAAvGA,YAAYC,EAA2F,EAA3FA,UAAU9E,EAAiF,EAAjFA,iBAAiB+E,EAAgE,EAAhEA,WAAWrB,EAAqD,EAArDA,aAAgCf,GAAqB,EAAxCqC,mBAAwC,EAArBrC,WAAUsC,EAAW,EAAXA,MAE1K,OACI,qBAAK5G,UAAY,MAAjB,SACI,sBAAKA,UAAY,WAAjB,UACG,qBAAKA,UAAa,eAAgB0G,EAAlC,SACK,qBAAK1G,UAAY,OAAjB,SACI,qBAAKA,UAAY,cAAjB,SAAgCkG,EAAKW,SAAS,SAAU,cAAC,EAAD,CAASb,OAAUE,EAAKY,OAAO,EAAEZ,EAAKxC,OAAO,KAAMwC,QAQnH,sBAAKlG,UAAa,QAAU0G,EAA5B,UACI,mBAAGtE,QAAS,kBAAIkC,EAAUxC,IAA1B,SAAmCA,EAAMQ,cAAcwE,OAAO,EAAEhF,EAAMiF,QAAQ,QAC9E,mBAAG/G,UAAU,OAAb,SAAqBmG,EAAKW,OAAO,EAAE,SAGvC,sBAAK9G,UAAW,SAAhB,UACmB,SAAVU,GAA0B,WAARA,EACd,wBAAQV,UAAY,aAAaoC,QAAW,kBAAImE,EAAQH,EAAEK,IAA1D,SACIG,GAAMjE,KAAKC,UAAUgE,GAAOC,SAASL,GACjC,qBAAKb,IAAOqB,EAAOnB,IAAI,SAASC,MAAM,UACc,qBAAKH,IAAOsB,EAAMpB,IAAI,OAAOC,MAAQ,YAGjG,6BACT,sBAAK9F,UAAY,aAAjB,WACe,SAAVU,GAA0B,WAARA,IACdkG,EACK,qBAAK5G,UAAY,WAAjB,SACG4G,EAAMlD,QAAQ,EAAd,UACOkD,EAAMlD,OADb,UAEKkD,EAAMlD,OAAO,EACTkD,EAAMlD,OAAO,EACVf,KAAKuE,MAAMN,EAAM,IAAIzG,KAAK,KAAKwC,KAAKuE,MAAMN,EAAM,IAAIzG,KAAK,SAASwC,KAAKuE,MAAMN,EAAM,IAAIzG,KAAK,kBAC5FwC,KAAKuE,MAAMN,EAAM,IAAIzG,KAAK,QAAQwC,KAAKuE,MAAMN,EAAM,IAAIzG,KAAK,kBAC/DyG,EAAMlD,OAAOf,KAAKuE,MAAMN,GAAOzG,KAAK,mBAAmB,KAGxE,6BAEL,qBAAKH,UAAY,kBAAjB,SACe,SAAVU,GAA0B,WAARA,EACd,8BAAMiB,EAAiByE,GAAGtE,QAAQ0E,EAC9B,qBAAKxG,UAAY,mBAAjB,SACG,wBAAQA,UAAY,eAAeI,GAAMgG,EAAGhE,QAAW,kBAAIiE,EAAWD,EAAEf,EAAaoB,IAArF,iBAEH,+BAEJ,qBAAKzG,UAAY,mBAAjB,SACG,wBAAQA,UAAY,eAAeI,GAAMgG,EAAGhE,QAAW,kBAAIkE,EAAWG,IAAtE,+BCgVrBU,EAlYE,SAAC,GAA6Q,IAA5Q1G,EAA2Q,EAA3QA,KAAM2G,EAAqQ,EAArQA,eAAejG,EAAsP,EAAtPA,aAA6BF,GAAyN,EAAzOM,gBAAyO,EAAzNN,mBAAkBoG,EAAuM,EAAvMA,qBAAqBV,EAAkL,EAAlLA,mBAAyCtF,GAAyI,EAA/JG,sBAA+J,EAAzIH,yBAAwBgF,EAAiH,EAAjHA,WAAW3F,EAAsG,EAAtGA,MAAO4D,EAA+F,EAA/FA,UAAwB5C,GAAuE,EAApF0D,aAAoF,EAAvE1D,qBAAoBC,EAAmD,EAAnDA,iBAAiB0D,EAAkC,EAAlCA,aAGxP,GAH0R,EAArBC,gBAG9Nd,mBAAS,CAAC8C,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,eAAeC,SAAS,aAAxI,mBAAOC,EAAP,KAAoBC,EAApB,KACIC,EAAS,GACTnB,EAAa,GAEjB5B,qBAAU,WAEcsC,EAAejB,KAEN,KAAzBiB,EAAeG,UAqBnBjH,EAAOwH,KAAK,gBAAgB,CACZ3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MAAMQ,cACjBiF,QAAQH,EAAeG,QACvBpB,KAAK,cACLS,MAAM,KAEN3F,GAAkB,SAAC+B,GACX,OAAO,2BAAIA,GAAX,IAA8BuE,QAAQ,WAGhE,CAACH,EAAejB,OAElBrB,qBAAU,WACN,IAAMiD,EAAcV,EAAqBlB,KAEN,KAA/BkB,EAAqBE,UAmBrBjH,EAAOwH,KAAK,gBAAgB,CAChB3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MAAMQ,cACjBiF,QAAQF,EAAqBE,QAC7BpB,KAAK4B,EACLnB,MAAM,KAENvF,GAAwB,SAAC2G,GACjB,OAAO,2BAAIA,GAAX,IAAoCT,QAAQ,WAGtE,CAACF,EAAqBlB,OAGxBrB,qBAAU,WACFrE,EAAK0C,UAETzB,GAAoB,WAChB,OAAOP,EAAa8G,QAAO,SAACV,GAAD,OAAWA,EAAQzF,QAAQrB,EAAKqB,OAAOrB,EAAK0C,QAAQ0D,SAASU,EAAQzF,aAEpGI,QAAQC,IAAIR,MAEd,CAAClB,EAAK0C,QAAQhC,IAGhB,IAAM+G,EAAW,SAACZ,IACVA,GAA2C,KAA/BD,EAAqBE,SAA0C,KAA1BH,EAAeG,UAChElC,EACIhE,GAAwB,SAAC2G,GACrB,OAAO,2BAAIA,GAAX,IAAoCT,QAAQ,QAAQF,EAAqBE,aAG7EtG,GAAkB,SAAC+B,GACnB,OAAO,2BAAIA,GAAX,IAA8BuE,QAAQ,QAAQH,EAAeG,cAGrElC,EACAhE,GAAwB,SAAC2G,GACrB,OAAO,2BAAIA,GAAX,IAAoC7B,KAAKgC,OAAOC,sBAGpDnH,GAAkB,SAAC+B,GACf,OAAO,2BAAIA,GAAX,IAA8BmD,KAAKgC,OAAOC,sBAE9CR,EAAgB,CAACN,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,eAAeC,SAAS,aAGtGW,EAAgB,SAACtG,GACnBsD,EACIhE,GAAwB,SAAC2G,GACrB,OAAO,2BAAIA,GAAX,IAAoCT,QAAQxF,EAAMC,OAAOjC,WAE5DkB,GAAkB,SAAC+B,GAChB,OAAO,2BAAIA,GAAX,IAA8BuE,QAAQxF,EAAMC,OAAOjC,YAIzDuI,EAAa,SAACC,GAEhB,OADArG,QAAQC,IAAIoG,EAAK9H,EAAKqB,OACfa,KAAKuE,MAAMqB,GAAMzG,QAAQrB,EAAKqB,MAAMQ,eAQzCiE,EAAU,SAACH,EAAEK,GACf,IAAI+B,GAAS,EAGb,GAAInD,EAAa,CACb,IAAMoD,EAAM,YAAO9B,GACf8B,EAAOrC,GAAGQ,QACV4B,EAAYC,EAAOrC,GAAGQ,MAAM8B,MAAMJ,IAEtCpG,QAAQC,IAAIqG,GAEPC,EAAOrC,GAAGQ,MAAM4B,EAwBjBlI,EAAOwH,KAAK,QAAQ,CACR3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MACX1B,GAAGqG,EACHkC,SAAS,mBAkBzBrI,EAAOwH,KAAK,UAAU,CACV3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MACX1B,GAAGqG,EACHkC,SAAS,wBAInB,IAAKtD,EAAa,CACpB,IAAMoD,EAAM,YAAO9G,GAEf8G,EAAOrC,GAAGQ,QACV4B,EAAYC,EAAOrC,GAAGQ,MAAM8B,MAAMJ,KAGjCG,EAAOrC,GAAGQ,OAAS4B,EAepBlI,EAAOwH,KAAK,QAAQ,CACR3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MACX1B,GAAGqG,EACHkC,SAAS,kBAiBrBrI,EAAOwH,KAAK,UAAU,CACV3H,KAAKM,EAAKN,KACV2B,MAAMrB,EAAKqB,MACX1B,GAAGqG,EACHkC,SAAS,oBAQ3BC,EAAe,SAACtB,GAEfM,EADAN,EACgB,CAACA,QAAQ,GAAGC,QAAQ,eAAeC,OAAO,eAAeC,OAAO,GAAGC,SAAS,UAE3E,CAACJ,QAAQ,eAAeC,QAAQ,GAAGC,OAAO,eAAeC,OAAO,GAAGC,SAAS,YAI9FmB,EAAS,WACXjB,EAAgB,CAACN,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,eAAeC,SAAS,YACxGrC,EACIhE,GAAwB,SAAC2G,GACrB,OAAO,2BAAIA,GAAX,IAAoCT,QAAQ,QAE/CtG,GAAkB,SAAC+B,GAChB,OAAO,2BAAIA,GAAX,IAA8BuE,QAAQ,SAIlD,OACI,qBAAKvH,UAAY,cAAjB,SACKqF,EACG,qCACI,qBAAKrF,UAAY,WAAjB,SACI,gCACI,uBAAOI,GAAK,MAAMJ,UAAa,sBAAsB2H,EAAaL,QAASwB,KAAK,KAAKC,KAAK,IAAI1I,SAAYgI,EAAeW,YAAc,oBAAoBjJ,MAASsH,EAAqBE,QAAS0B,WAAS,IAC3M,0BAAU7I,GAAG,MAAMJ,UAAa,mBAAmB2H,EAAaJ,QAAUlH,SAAYgI,EAAetI,MAASsH,EAAqBE,QAAS0B,WAAS,SAM7J,sBAAKjJ,UAAU,iBAAf,UACI,sBAAKA,UAAY,WAAjB,UACI,uBAAOA,UAAa,OAAO2H,EAAaF,OAAQrF,QAAW,kBAAI8F,EAAgC,KAAvBP,EAAaL,UAArF,oBACA,uBAAOtH,UAAa,OAAO2H,EAAaF,OAAQrF,QAAWyG,EAA3D,kBACA,uBAAO5I,QAAQ,MAAMD,UAAa,OAAO2H,EAAaH,OAAQpF,QAAW,kBAAIwG,GAAa,IAA1F,qBACA,uBAAO3I,QAAS,MAAMD,UAAa,OAAO2H,EAAaH,OAAQpF,QAAW,kBAAIwG,GAAa,IAA3F,wBAGJ,qBAAK5I,UAAU,SAAf,SACK2G,EAAmB3B,KAAI,SAACkE,EAAI9C,GACzB,IAAMI,EAAcG,EAAmBjD,OAAS,EAAG0C,EAC7CK,EAAYE,EAAmBH,GAAapG,GAElD,OAAO,8BACH,cAAC,EAAD,CACIuB,iBAAoBgF,EACpBH,YAAe/F,EAAKqB,MACpBA,MAAS6E,EAAmBH,GAAa1E,MACzCoE,KAAOS,EAAmBH,GAAae,QACvCpB,KAAQQ,EAAmBH,GAAaL,KACxCC,EAAKI,EACLC,UAAaA,EACbJ,WAAcA,EACd3F,MAAOA,EACP6F,QAAWA,EACXK,MAASD,EAAmBH,GAAaI,MACzCvB,aAAgBA,EAChBf,UAAaA,KAdF8B,cAwBnC,qCACI,sBAAKpG,UAAY,WAAjB,UACI,uBACII,GAAK,YACLJ,UAAa,sBAAsB2H,EAAaL,QAChDjH,SAAYgI,EACZW,YAAc,oBACdjJ,MAASqH,EAAeG,UAE5B,0BACInH,GAAK,YACLJ,UAAa,mBAAmB2H,EAAaJ,QAC7ClH,SAAYgI,EACZtI,MAASqH,EAAeG,aAMhC,sBAAKvH,UAAU,iBAAf,UACI,sBAAKA,UAAY,WAAjB,UACI,uBAAOC,QAAS,YAAYD,UAAa,OAAO2H,EAAaH,OAAQpF,QAAW,kBAAIwG,GAAa,IAAjG,qBACA,uBAAO3I,QAAU,YAAYD,UAAa,OAAO2H,EAAaH,OAAQpF,QAAW,kBAAIwG,GAAa,IAAlG,qBACA,uBAAO5I,UAAa,OAAO2H,EAAaF,OAAQrF,QAAW,kBAAI8F,EAAgC,KAAvBP,EAAaL,UAArF,oBACA,uBAAOtH,UAAa,OAAO2H,EAAaF,OAAQrF,QAAWyG,EAA3D,qBAEJ,qBAAK7I,UAAU,SAAf,SACK2B,EAAiBqD,KAAI,SAACuC,EAAQnB,GAE3B,IAAMI,EAAc7E,EAAiB+B,OAAQ,EAAE0C,EACzCK,EAAY9E,EAAiB6E,GAAapG,GAGhD,OAF6EyH,EAA7ElG,EAAiB6E,GAAa1E,MAAMQ,gBAAgB7B,EAAKqB,MAAMQ,cAAqB,SAAgB,YACvBoE,EAA7E/E,EAAiB6E,GAAa1E,MAAMQ,gBAAgB7B,EAAKqB,MAAMQ,cAAyB,mBAA8B,GAC/G,qBAActC,UAAa6H,EAA3B,SACK,cAAC,EAAD,CACIlG,iBAAoBA,EACpB6E,YAAe/F,EAAKqB,MACpBA,MAASH,EAAiB6E,GAAa1E,MACvCoE,KAAOvE,EAAiB6E,GAAae,QACrCpB,KAAQxE,EAAiB6E,GAAaL,KACtCC,EAAKI,EACLC,UAAaA,EACbJ,WAAcA,EACd3F,MAAOA,EACP6F,QAAWA,EACXK,MAASjF,EAAiB6E,GAAaI,MACvCvB,aAAgBA,EAChBf,UAAaA,EACboC,WAAcA,KAfZN,iBCpLnC+C,G,MAnLF,SAAC,GAA2I,IAA1IC,EAAyI,EAAzIA,eAAgB7E,EAAyH,EAAzHA,kBAAmBgB,EAAsG,EAAtGA,gBAAqC9E,GAAiE,EAArFS,mBAAqF,EAAjET,MAAgB2E,GAAiD,EAA5DiB,WAA4D,EAAjDjB,cAAahE,EAAoC,EAApCA,gBAAgB0C,EAAoB,EAApBA,SAASpD,EAAW,EAAXA,MAEzI,EAA+C8D,mBAAS,CAAC8C,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,iBAAxH,mBAAO4B,EAAP,KAAwBC,EAAxB,KACIzB,EAAO,GACPnB,EAAW,GAGf5B,qBAAU,WAEuB,KAAzBsE,EAAe7B,SAiBfjH,EAAOwH,KAAK,iBAAiB,CACjB3H,KAAKM,EAAKN,KACVoJ,YAAY9I,EAAKqB,MACjB0H,eAAepE,EAAalC,IAC5BqE,QAAQ6B,EAAe7B,QACvBpB,KAAK,gBAGjB5B,GAAkB,SAACkF,GACf,OAAO,2BAAIA,GAAX,IAA8BtJ,KAAK,GAAGoH,QAAQ,GAAGpB,KAAK,UAChE,CAACiD,EAAejD,OAGlB,IAAMrG,EAAW,SAACiC,GACdwC,GAAkB,SAACkF,GACf,OAAO,2BAAIA,GAAX,IAA8BlC,QAAQxF,EAAMC,OAAOjC,YAiBrDuG,EAAa,SAACG,GAahBnG,EAAOwH,KAAK,aAAa,CACb1H,GAAGqG,EACHkC,SAAS,oBAInBC,EAAe,SAACtB,GAEfgC,EADAhC,EACoB,CAACA,QAAQ,GAAGC,QAAQ,eAAeC,OAAO,eAAeC,OAAO,IAE/D,CAACH,QAAQ,eAAeC,QAAQ,GAAGC,OAAO,eAAeC,OAAO,MAiB5F,OACI,qBAAKzH,UAAY,UAAjB,SACKoF,EAAalC,IACd,gCACI,gCACI,uBACI9C,GAAK,UACLJ,UAAa,gBAAgBqJ,EAAiB/B,QAASwB,KAAK,KAAKC,KAAK,IACtE1I,SAAYP,EACZkJ,YAAc,oBACdjJ,MAASqJ,EAAe7B,UAE5B,0BACInH,GAAK,OACLJ,UAAa,gBAAgBqJ,EAAiB9B,QAASuB,KAAK,KAAKC,KAAK,IACtE1I,SAAYP,EACZC,MAASqJ,EAAe7B,UAE5B,sBAAKvH,UAAY,cAAjB,UACA,uBAAOC,QAAU,OAAOD,UAAa,WAAWqJ,EAAiB7B,OAAQpF,QAAW,kBAAIwG,GAAa,IAArG,qBACA,uBAAO3I,QAAU,UAAUD,UAAa,WAAWqJ,EAAiB7B,OAAQpF,QAAW,kBAAIwG,GAAa,IAAxG,qBACA,uBAAO5I,UAAa,WAAWqJ,EAAiB5B,OAAQrF,QAAW,iBAAsC,KAA3BiH,EAAiB/B,SAxEpE,KAAzB8B,EAAe7B,SACzBhD,GAAkB,SAACkF,GACf,OAAO,2BAAIA,GAAX,IAA8BlC,QAAQ,QAAQ6B,EAAe7B,aAGrEhD,GAAkB,SAACkF,GACf,OAAO,2BAAIA,GAAX,IAA8BtD,KAAKgC,OAAOC,2BAE5CkB,EAAoB,CAAChC,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,kBAgE1E,oBACA,uBAAOzH,UAAa,WAAWqJ,EAAiB5B,OAAQrF,QAnCzD,WACXkH,EAAoB,CAAChC,QAAQ,eAAeC,QAAQ,eAAeC,OAAO,GAAGC,OAAO,iBAEpFlD,GAAkB,SAACmF,GACf,OAAO,2BAAIA,GAAX,IAAqCnC,QAAQ,SA+BrC,qBAEA,sBAAKvH,UAAY,iBAAjB,UACI,wBAAQA,UAAY,aAAaoC,QA/B9B,WACnBhB,GAAgB,SAAAuI,GACZ,OAAO,2BAAIA,GAAX,IAA4BzG,IAAI,SA6BpB,eACA,mBAAGlD,UAAY,cAAf,SAA8BoF,EAAalC,YAGnD,qBAAKlD,UAAY,WAAjB,SACCuF,EAAgBP,KAAI,SAACuC,EAAQnB,GAC1B,IAAMgB,EAAiB7B,EAAgB7B,OAAO,EAAE0C,EAC1CK,EAAYlB,EAAgB6B,GAAgBhH,GAClD,GAAMmF,EAAgB6B,GAAgBoC,eAAelH,gBAAkB8C,EAAalC,KAC9EqC,EAAgB6B,GAAgBmC,YAAYjH,gBAAkB7B,EAAKqB,OAC9DyD,EAAgB6B,GAAgBmC,YAAYjH,gBAAiB8C,EAAalC,KAC3EqC,EAAgB6B,GAAgBoC,eAAelH,gBAAkB7B,EAAKqB,MAKpE,OAFqF+F,EAArFtC,EAAgB6B,GAAgBmC,YAAYjH,gBAAgB7B,EAAKqB,MAAMQ,cAAqB,SAAgB,YACvBoE,EAArFnB,EAAgB6B,GAAgBmC,YAAYjH,gBAAgB7B,EAAKqB,MAAMQ,cAAyB,mBAA8B,GACvH,qBAAKtC,UAAa6H,EAAlB,SAEK,cAAC,EAAD,CAAY/F,MAASyD,EAAgB6B,GAAgBmC,YACrDrD,KAAOX,EAAgB6B,GAAgBG,QACvCpB,KAAQZ,EAAgB6B,GAAgBjB,KACxCC,EAAKA,EACLE,WAAcA,EACbG,UAAaA,EACdC,WAAcA,cAU1C,sBAAK1G,UAAY,qBAAjB,UAEI,mBAAGA,UAAY,cAAf,yCACwB,oBAAIA,UAAY,gBAAhB,SACKS,EAAK0C,QAAQ6B,KAAI,SAACnB,GACf,OAAO,8BACH,cAAC,EAAD,CAAQC,SAAYA,EAAUD,OAAUA,EAAQnD,MAAOA,kB,MCgRhGkJ,MA3af,WAAgB,IAAD,EACb,EAAuBpF,mBAAS,CAACrE,KAAK,GAAG2B,MAAM,GAAGqB,QAAQ,GAAG0G,QAAQ,GAAGxG,gBAAgB,KAAxF,mBAAO5C,EAAP,KAAYI,EAAZ,KACA,EAA+B2D,mBAAS,IAAxC,mBAAO5C,EAAP,KAAgBC,EAAhB,KACA,EAAyB2C,mBAAS,WAAlC,mBAAO9D,EAAP,KAAaE,EAAb,KACA,EAAmC4D,oBAAS,GAA5C,mBAAOU,EAAP,KAAkBnE,EAAlB,KACA,EAAuCyD,mBAAS,IAAhD,mBAAO7D,EAAP,KAAoBG,EAApB,KACA,EAAuC0D,mBAAS,IAAhD,mBAAOrD,EAAP,KAAoBI,EAApB,KACA,EAA4CiD,mBAAS,CAACpE,GAAG,GAAGD,KAAK,GAAG2B,MAAM,GAAGyF,QAAQ,GAAGpB,KAAK,GAAGS,MAAM,KAAtG,mBAAOQ,EAAP,KAAuBnG,EAAvB,KACA,EAAmDuD,mBAAS,IAA5D,mBAAOmC,EAAP,KAA0BnF,EAA1B,KACA,EAAwDgD,mBAAS,CAACpE,GAAG,GAAGD,KAAK,GAAG2B,MAAM,GAAGyF,QAAQ,GAAGpB,KAAK,GAAGS,MAAM,KAAlH,mBAAOS,EAAP,KAA6BhG,EAA7B,KACA,EAA6CmD,mBAAS,IAAtD,mBAAOe,EAAP,KAAuBrE,EAAvB,KACA,EAA4CsD,mBAAS,CAACpE,GAAG,GAAGD,KAAK,GAAGoJ,YAAY,GAAGC,eAAe,GAAGjC,QAAQ,GAAGpB,KAAK,KAArH,mBAAOiD,GAAP,KAAuB7E,GAAvB,KACA,GAAuCC,mBAAS,CAACvB,GAAG,GAAGC,IAAI,KAA3D,qBAAOkC,GAAP,MAAoBhE,GAApB,MACA,GAA+CoD,mBAAS,IAAxD,qBAAO7C,GAAP,MAAwBD,GAAxB,MACA,GAAuC8C,oBAAS,GAAhD,qBAAOa,GAAP,MAAoBC,GAApB,MAEAR,qBAAU,WACRxE,EAAOwJ,GAAG,iBAAgB,SAAAC,GAMxB,OALA7H,QAAQC,IAAI4H,EAAK,GAAGtJ,EAAKqB,OACrBiI,EAAK,GAAGjI,QAAQrB,EAAKqB,QACvBjB,EAAQkJ,EAAK,IACb7H,QAAQC,IAAI,UAAU1B,IAEjB,WAELH,EAAO0J,IAAI,uBAGf,IAEFlF,qBAAU,WAoBR,OAnBAxE,EAAOwJ,GAAG,YAAW,SAAAC,GAanB7H,QAAQC,IAAI4H,EAAKtJ,GACbsJ,EAAK,GAAGjI,QAAQrB,EAAKqB,OACvBjB,EAAQkJ,EAAK,OAIV,WACLzJ,EAAO0J,IAAI,eAEb,IAEFlF,qBAAU,WAQR,OAPAxE,EAAOwJ,GAAG,UAAS,SAAAC,GACjB7H,QAAQC,IAAI4H,EAAK,GAAGtJ,GAChBsJ,EAAK,GAAGjI,QAAQrB,EAAKqB,QACvBI,QAAQC,IAAI,eAAe4H,EAAK,IAChClJ,EAAQkJ,EAAK,QAGV,WACLzJ,EAAO0J,IAAI,aAEb,IAEFlF,qBAAU,WAMN,OALFxE,EAAOwJ,GAAG,gBAAe,SAAAC,GACvB7H,QAAQC,IAAI,SAAS4H,EAAKtJ,GACtBsJ,EAAK,GAAGjI,QAAQrB,EAAKqB,OACvBjB,EAAQkJ,EAAK,OAER,WACLzJ,EAAO0J,IAAI,mBAEf,IAGF1J,EAAOwJ,GAAG,kBAAiB,SAACC,GAC1B7I,EAAmB6I,MAErBzJ,EAAOwJ,GAAG,iBAAgB,SAACC,GACzBvI,EAAsBuI,MAE1BzJ,EAAOwJ,GAAG,iBAAgB,SAACC,GAEzBxI,EAAgBwI,MAElBzJ,EAAOwJ,GAAG,eAAc,SAAAC,GACpBvI,EAAsBuI,MAE1BzJ,EAAOwJ,GAAG,eAAc,SAAAC,GACtBxI,EAAgBwI,MAKlBzJ,EAAOwJ,GAAG,iBAAgB,SAAAC,GACtBvI,EAAsBuI,MAE1BzJ,EAAOwJ,GAAG,iBAAgB,SAAAC,GACxBxI,EAAgBwI,MAElBzJ,EAAOwJ,GAAG,uBAAsB,SAAAC,GAC5BvI,EAAsBuI,MAE1BzJ,EAAOwJ,GAAG,uBAAsB,SAAAC,GAC5BxI,EAAgBwI,MAEpBzJ,EAAOwJ,GAAG,cAAa,SAAAC,GACnB7I,EAAmB6I,MA+DrBjF,qBAAW,WACLrE,EAAK0C,SACPzB,IAAoB,WAClB,OAAOP,EAAa8G,QAAO,SAACV,GAAD,OAAWA,EAAQzF,QAAQrB,EAAKqB,OAAOrB,EAAK0C,QAAQ0D,SAASU,EAAQzF,eAEpG,IAEF,IAaMd,GAAgB,SAACN,GACV,SAAVA,GAA6B,SAATA,GAA4B,YAATA,GAA8B,WAARA,EAAmBK,GAAc,IAZ/FH,EAAS,WACTG,GAAc,GACdF,EAAQ,CAACV,KAAK,GAAG2B,MAAM,GAAGqB,QAAQ,GAAGC,SAAS,GAAGC,gBAAgB,KACjEpC,EAAkB,CAACb,GAAG,GAAGD,KAAK,GAAG2B,MAAM,GAAGyF,QAAQ,GAAGpB,KAAK,GAAGS,MAAM,KACnErC,GAAkB,CAACnE,GAAG,GAAGD,KAAK,GAAGoJ,YAAY,GAAGC,eAAe,GAAGjC,QAAQ,GAAGpB,KAAK,KAClF/E,GAAgB,CAAC6B,GAAG,GAAGC,IAAI,KAC3BoC,IAAgB,GAChBxE,EAAgB,IAChBe,EAAY,KAKZjB,EAASF,IAILe,GAAW,SAACwI,EAASC,EAAKC,GAC9B5H,MAAM,mDAAD,OAAoD0H,GAAW,CAC9DzH,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKwH,IAEJrH,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GACFqH,EAAWrH,MACdQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,OAK1B8C,GAAa,SAAC+D,EAAa/E,EAAaoB,GACxCpB,EAcF/E,EAAOwH,KAAK,gBAAgB,CAClB1H,GAAGqG,EACHkC,SAAS,mBAiBnBrI,EAAOwH,KAAK,gBAAgB,CAC1B1H,GAAGqG,EACHkC,SAAS,mBAITrE,GAAY,SAAC+F,GACjBnI,QAAQC,IAAI,SAAS1B,GACL,aAAZ4J,IACFA,EAAYC,OAAO,4CAErBpI,QAAQC,IAAI1B,EAAKqB,OACbuI,IACK5J,EAAK0C,SAAU1C,EAAK0C,QAAQ0D,SAASwD,IAAa5J,EAAK4C,gBAAgBwD,SAASwD,IAAa5J,EAAKoJ,QAAQhD,SAASwD,IACtH9H,MAAM,gEAAgE,CAClEC,OAAO,OACPC,QAAQ,CAAC,eAAe,oBACxBC,KAAKC,KAAKC,UAAU,CAChBd,MAAMrB,EAAKqB,MACXuI,UAAUA,EAAU/H,kBAGvBO,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAEJyH,MAAM,0BAAD,OAA2BF,EAAU/H,cAArC,MACLJ,QAAQC,IAAIW,MAKbQ,OAAM,SAAAC,GAAG,OAAErB,QAAQC,IAAIoB,QAmBhCO,GAAW,SAACD,GAEhBzC,IAAgB,SAACuI,GACb,OAAO,2BAAIA,GAAX,IAA4BzG,IAAIW,OAEpCU,IAAkB,SAACkF,GACf,OAAO,2BAAIA,GAAX,IAA8Be,eAAe3G,OAEjDjD,EAAS,SAKT,OACE,sBAAKZ,UAAU,MAAf,UACI,cAAC,GAAD,GACIgB,cAAiBA,GACjBkE,WAAcA,EACdxE,MAAOA,EACPD,KAAQA,EACRI,QAAWA,GALf,sBAMaH,GANb,yBAOgBE,GAPhB,kCAQyB2D,IARzB,gCASuBnD,IATvB,6BAUoBgE,IAVpB,0BAWiBd,IAXjB,6BAYoBe,IAZpB,gCAauBC,IAbvB,oCAtBqB,SAAC5E,EAAM+J,GAEhCnF,GAAgBmF,GAChBzJ,GAAcN,MAmBV,gCAeuB6E,GAfvB,IAkBCL,EACc,SAARxE,GAAwB,WAARA,EACZ,qBAAKV,UAAY,OAAjB,SACK,qBAAKA,UAAY,cAAjB,SACI,cAAC,EAAD,CACIS,KAAQA,EACRgB,SAAYA,GAGZf,MAASA,EACT2F,WAAcA,GACde,eAAkBA,EAClBnG,kBAAqBA,EACrBE,aAAgBA,EAChBI,gBAAmBA,EACnB8F,qBAAwBA,EACxBhG,wBAA2BA,EAC3BsF,mBAAsBA,EACtBnF,sBAAyBA,EACzB8C,UAAaA,GACbc,aAAgBA,GAChB1D,oBAAuBA,GACvBC,iBAAoBA,GACpB0D,aAAgBA,GAChBC,gBAAmBA,SAIxB,SAAR5E,EACD,qBAAKV,UAAY,OAAjB,SACI,qBAAKA,UAAY,cAAjB,SACI,cAAC,EAAD,CACIS,KAAOA,EACP2I,eAAkBA,GAClB7E,kBAAqBA,GACrBgB,gBAAmBA,EACnBrE,mBAAsBA,EACtBmF,WAAcA,GACdjB,aAAgBA,GAChB3D,SAAYA,GACZL,gBAAmBA,GACnB0C,SAAYA,GACZpD,MAASA,QAMf,cAAC,EAAD,CACID,KAAQA,EACRI,QAAWA,EACXH,MAASA,EACTE,SAAYA,EACZ2D,kBAAqBA,GACrBnD,gBAAmBA,GACnBkD,UAAaA,GACbtD,cAAiBA,GACjB8C,SAAYA,KAM1B,mCACE,cAAC,EAAD,CACIrD,KAAQA,EACRC,MAASA,EACTC,aAAgBA,EAChBE,QAAWA,EACXD,SAAYA,EACZE,gBAAmBA,EACnBC,cAAiBA,EACjBC,cAAiBA,GACjBC,kBAAqBA,EACrBE,aAAgBA,EAChBD,mBAAsBA,EACtBK,gBAAmBA,EACnBF,wBAA2BA,EAC3BG,sBAAyBA,EACzBJ,gBAAmBA,GACnBM,oBAAuBA,GACvBD,SAAYA,GACZG,SAAYA,EACZC,YAAeA,UCpapB6I,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/H,MAAK,YAAkD,IAA/CgI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.24eb58b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Login.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\n\r\nconst Inputblock = ({inputType,onChanges,value}) => {\r\n    return (\r\n                \r\n        <div className=\"inputBlock\">\r\n            <label className=\"inputLabel\" htmlFor={inputType}>{inputType}</label>\r\n            <input \r\n                className=\"inputField\" \r\n                type= {inputType}\r\n                name={inputType}  \r\n                id={inputType}\r\n                value={value}\r\n                onChange = {onChanges}\r\n            />\r\n        </div>\r\n                \r\n    )\r\n}\r\n\r\nexport default Inputblock;","import {io} from \"socket.io-client\";\r\n\r\nconst URL = \"https://socially-distanced-server.herokuapp.com/\";\r\nconst socket = io(URL);\r\n\r\nexport default socket;","import React from 'react';\r\nimport Inputblock from './Inputblock';\r\nimport './Login.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\nimport { io } from 'socket.io-client';\r\n// import '../../colors3.css';\r\nconst Login = ({\r\n    user,route,errorMessage,\r\n    setRoute,setUser, setErrorMessage,\r\n    setIsSignedIn,onRouteChange, \r\n    setCurrentMessage, pastMessages,\r\n    setPrivateMessages, setCurrentPublicMessage,\r\n    setPrivatePublicMessage,setConversation,\r\n    setPastMessages,setPastPublicMessages,\r\n    setFilteredMessages,filteredMessages,\r\n    loadData,password,setPassword\r\n  }) => {\r\n    \r\n    const {name,email} = user;\r\n    \r\n    const onChanges= (event) =>{\r\n        switch (event.target.id){\r\n          case 'Name':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,name:event.target.value}})\r\n              console.log(user)\r\n            break;\r\n          case 'Email':\r\n            setUser((prevUser)=>{\r\n                return {...prevUser,email:event.target.value}})\r\n            break;\r\n          case 'Password':\r\n            setPassword(event.target.value)\r\n            break;\r\n          default:\r\n              console.log(event.target.value)\r\n        }\r\n      }\r\n  \r\n\r\n    const verifyLogin = (upperEmail) => {\r\n        fetch('https://socially-distanced-server.herokuapp.com/signin',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n              email:upperEmail,\r\n              password:password\r\n            })\r\n          })\r\n        .then(res=>res.json())\r\n        .then(res=>{\r\n            if (res.email===upperEmail){\r\n              setUser(res)\r\n              // =>{\r\n              // =>{\r\n                // console.log(res)\r\n                // return {...prevUser,name:user.name,email:res.email,friends:res.friends,requests:res.requests,pendingrequests:res.pendingrequests}\r\n              // })\r\n              console.log('login',user,res)\r\n              setRoute('home')\r\n              setIsSignedIn(true)\r\n              setErrorMessage('')\r\n              setPassword('')\r\n              setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,name:res.name,email:upperEmail}})\r\n                \r\n              setConversation({me:res.email,you:''})\r\n              \r\n\r\n            }else{\r\n              setErrorMessage('Invalid Login Information')\r\n              setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n              setPassword('')\r\n            }\r\n            \r\n        })\r\n        .catch(err=>console.log(err))\r\n        // socket.emit('signin',JSON.stringify({\r\n        //         email:upperEmail,\r\n        //         password:user.password\r\n        //       }))\r\n\r\n        loadData('friendmessageload',\r\n                  JSON.stringify({\r\n                    email:upperEmail,\r\n                    friends:user.friends\r\n                  }),\r\n                  setPastMessages\r\n                  )\r\n        loadData('publicmessageload',\r\n                  JSON.stringify({\r\n                      email:upperEmail,\r\n                      friends:user.friends\r\n                  }),\r\n                  setPastPublicMessages\r\n                  )\r\n\r\n        loadData('privatemessageload',\r\n                  JSON.stringify({\r\n                    email: upperEmail,\r\n                    friends:user.friends\r\n                  }),\r\n                  setPrivateMessages\r\n                  )    \r\n        \r\n      }\r\n    \r\n      const verifyRegistration = (upperEmail) => {\r\n        const emailPattern = /\\S+@\\S+\\.\\S+/\r\n            if (emailPattern.test(email) && password.length>=8){\r\n              fetch('https://socially-distanced-server.herokuapp.com/register',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                  name:user.name,\r\n                  email:upperEmail,\r\n                  password:password,\r\n                  friends:user.friends\r\n                })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(user=>{\r\n                if (user==='TAKEN'){\r\n                  setErrorMessage('That email address is already registered.')\r\n                }else{\r\n                  setUser(user)\r\n                  setRoute('home')\r\n                  setIsSignedIn(true)\r\n                  setErrorMessage('')\r\n                  setPassword('')\r\n                  setCurrentMessage((prevCurrentMessage)=>{\r\n                    return {...prevCurrentMessage,name:user.name,email:user.email}})\r\n                }\r\n                \r\n            \r\n                })\r\n                .catch(err=>console.log(err))\r\n              // socket.emit('register',JSON.stringify({\r\n              //       name:user.name,\r\n              //       email:upperEmail,\r\n              //       password:user.password,\r\n              //       friends:user.friends\r\n              //     }))\r\n\r\n                loadData('publicmessageload',\r\n                  JSON.stringify({\r\n                      email:upperEmail,\r\n                      friends:user.friends\r\n                  }),\r\n                  setPastPublicMessages\r\n                  )\r\n              }else if (password.length<8){\r\n                setErrorMessage('Password must be 8 characters long')\r\n              }else{\r\n                setErrorMessage('Enter a valid email address')\r\n              }\r\n      }\r\n\r\n      const onSubmit = () => {\r\n        const upperEmail = user.email.toUpperCase()\r\n        route==='Sign In'?verifyLogin(upperEmail):verifyRegistration(upperEmail);\r\n      }    \r\n      \r\n    return(        \r\n        <div>\r\n            <div className=\"container\">\r\n                <article className=\"formWindow\">\r\n                    <div className = \"formcontainer\">\r\n                        {(route===\"Register\"\r\n                            ?\r\n                            <div>\r\n                                <h1 className=\"legend\">Register</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Name\"} value={name} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Email\"} value = {email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <h1 className=\"legend\">Sign In</h1>\r\n                                <div className=\"error\">{errorMessage}</div>   \r\n                                <Inputblock inputType = {\"Email\"} value={email} onChanges ={onChanges}/>\r\n                                <Inputblock inputType = {\"Password\"} value={password} onChanges ={onChanges}/>\r\n\r\n                            </div>\r\n                        )}\r\n\r\n                        <div className=\"legend\">\r\n                            <button type = \"submit\" className = \"button\" onClick = {onSubmit}>Submit</button>\r\n                        </div>\r\n                        <div className=\"legend\">\r\n                            {route==='Sign In'\r\n                            ?<p onClick = {() => onRouteChange('Register')}className=\"loginLink\">Register</p>\r\n                            :<p onClick = {() => onRouteChange('Sign In')} className=\"loginLink\">Sign In</p>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n    \r\n          </div>\r\n           \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Login;","export default __webpack_public_path__ + \"static/media/hamburger.745580e9.png\";","export default __webpack_public_path__ + \"static/media/home.2ea0f12c.png\";","import React from 'react';\r\nimport './Friends.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\n\r\nconst Friend = ({friend,converse, route,unFriend,pendOrReq}) => {\r\n    // console.log(friend)\r\n    return(\r\n        \r\n        <div className = \"radioButton\">\r\n            {route==='mail'?\r\n            <li><input type = \"radio\" name = \"friend\" id={friend} onClick = {()=>converse(friend)}/><label htmlFor={friend}>{friend}</label></li>\r\n       \r\n            :\r\n            <li><input type = \"radio\" name = \"friend\" id={friend} onClick = {()=>converse(friend)}/><label htmlFor={friend}>{friend}</label><button className = \"friendButton\" onClick = {()=>unFriend(friend,pendOrReq)}>X</button></li>\r\n       \r\n            }\r\n              </div>\r\n    )\r\n}\r\n\r\nexport default Friend;","import React from 'react';\r\nimport './Friends.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\n\r\nconst Request = ({friend, rejectFriend,acceptFriend,pendOrReq}) => {\r\n    // console.log(friend)\r\n    return(\r\n        <div className = \"radioButton\">\r\n             <li><input type = \"radio\" name = \"friend\" id={friend} /><label htmlFor={friend}>{friend}</label><button className = \"friendButton\" onClick = {()=>acceptFriend(friend)}>Accept</button><button className = \"friendButton\" onClick = {()=>rejectFriend(friend,pendOrReq)}>X</button></li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Request;","import React from 'react';\r\nimport './Friends.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\n\r\nconst Pending = ({friend, rejectFriend,pendOrReq}) => {\r\n    // console.log(friend)\r\n    return(\r\n        <div className = \"radioButton\">\r\n             <li><input type = \"radio\" name = \"friend\" id={friend} /><label htmlFor={friend}>{friend}</label><button className = \"friendButton\" onClick = {()=>rejectFriend(friend,pendOrReq)}>X</button></li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pending;","import React, {useState,useEffect} from 'react';\r\nimport Friend from './Friend';\r\nimport Request from './Request';\r\nimport Pending from './Pending';\r\nimport './Friends.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\nimport friendpicture from \"../../images/friend.png\";\r\nimport socket from '../../socket';\r\n\r\n\r\nconst arrow = \"x\";\r\n\r\nconst Friends = ({user,setUser,setPrivateMessage,route,setRoute, setConversation,addFriend,onRouteChange,converse}) => {\r\n    // const [friendList,setFriendList] = useState(display)\r\n    const [uniqueRequests,setUniqueRequests] = useState([...new Set(user?.requests)])\r\n    const [uniquePending,setUniquePending] = useState([...new Set(user?.pendingrequests)])\r\n   \r\n    useEffect(() =>{\r\n        setUniqueRequests([...new Set(user.requests)])\r\n        setUniquePending([...new Set(user.pendingrequests)])\r\n    },[user])\r\n\r\n    \r\n\r\n\r\n    // const toggleFriends = () => {\r\n    //     friendList?(setFriendList(false)):(setFriendList(true))\r\n       \r\n    // }\r\n\r\n    const unFriend = (friend) =>{\r\n        console.log(friend,user.email)\r\n        fetch('https://socially-distanced-server.herokuapp.com/unfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend.toUpperCase()\r\n                })\r\n            })\r\n            .then(res=>res.json())\r\n            .then(res=>{\r\n                // console.log(res)\r\n                // if (res){\r\n                //     setUser(res[0])\r\n                // }                   \r\n            }).catch(err=>console.log(err))\r\n        // socket.emit('unfriend',{\r\n        //             email:user.email,\r\n        //             friend:friend.toUpperCase()\r\n        //             })\r\n    }\r\n\r\n    const acceptFriend = (friend) =>{        \r\n        fetch('https://socially-distanced-server.herokuapp.com/acceptfriend',{\r\n            method:'post',\r\n            headers:{'Content-Type':'application/json'},\r\n            body:JSON.stringify({\r\n                email:user.email,\r\n                friend:friend\r\n                })\r\n            })\r\n            .then(res=>res.json())\r\n            .then(res=>{\r\n                // console.log(res)\r\n                // setUser(res[0])\r\n            }).catch(err=>console.log(err))\r\n        // socket.emit('acceptfriend',{\r\n        //             email:user.email,\r\n        //             friend:friend\r\n        //             })\r\n    }\r\n\r\n\r\n    const rejectFriend = (friend,pendOrReq) =>{      \r\n        if (pendOrReq==='Request'){\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:user.email,\r\n                    friend:friend,\r\n                    option:'request'\r\n                }\r\n                    )\r\n                })\r\n                .then(res=>res.json())\r\n                .then(res=>{\r\n                    // console.log('res',res,user)\r\n                    \r\n                }).catch(err=>console.log(err))\r\n            // socket.emit('reject',{\r\n            //             email:user.email,\r\n            //             friend:friend,\r\n            //             option:'request'\r\n            //         }\r\n                        // )\r\n        }else{\r\n            fetch('https://socially-distanced-server.herokuapp.com/reject',{\r\n                method:'post',\r\n                headers:{'Content-Type':'application/json'},\r\n                body:JSON.stringify({\r\n                    email:friend,\r\n                    friend:user.email,\r\n                    option:'pending'\r\n                }\r\n                    )\r\n                })\r\n                .then(res=>res.json())\r\n                .then(res=>{\r\n                    // console.log('res',res,user)\r\n                   \r\n                }).catch(err=>console.log(err))\r\n            // socket.emit('reject',{\r\n            //             email:friend,\r\n            //             friend:user.email,\r\n            //             option:'pending'\r\n            //         }\r\n            //             )\r\n            }\r\n        \r\n        \r\n    }\r\n\r\n    const { friends } = user\r\n    \r\n    return(\r\n            \r\n        <div className = \"maincomment\">                \r\n                \r\n                \r\n               \r\n                <div className=\"commentsection\">\r\n                    \r\n        \r\n                    <div className=\"\">\r\n                    <div className = \"\">\r\n                            <div  className=\"\">\r\n                                <div >\r\n                        \r\n                                    {/* <div className=\"friendtitlebox\"><p className=\"friendtitle\">{route===\"home\"?\"Friends List\":\"Contacts\"}</p></div> */}\r\n                                    {friends?\r\n                                        <div >\r\n                                            <ul className = \"scroll\">                            \r\n                                                {friends.map((friend)=>{\r\n                                                    return <Friend converse = {converse} friend = {friend} unFriend = {unFriend} />\r\n                                                    })\r\n                                                }\r\n                                             </ul>\r\n    \r\n                                        </div>\r\n                                        :<></>\r\n                                     }\r\n                        \r\n            \r\n                                    <button className = \"addFriend\" onClick = {()=>addFriend(\"No Names\")}>Add Friend</button>\r\n                                </div>\r\n                        \r\n                                {uniqueRequests && uniqueRequests[0]?\r\n                                    <div className = \"scroll\">  \r\n                                        <div className=\"friendtitlebox\"><p className=\"requesttitle\">Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {uniqueRequests.map((friend)=>{\r\n                                                return <Request friend = {friend} rejectFriend = {rejectFriend} pendOrReq ={'Request'} acceptFriend = {acceptFriend}/>\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n                                    </div>\r\n                                    :<></>\r\n                                }\r\n                                {uniquePending&&uniquePending[0]?\r\n                                    <div className = \"scroll\">\r\n                                        <div className=\"friendtitlebox\"><p className=\"pendingtitle\">Pending Request</p></div>\r\n                                        <ul className = \"scroll\">\r\n                                            {uniquePending.map((friend)=>{\r\n                                                return <Pending friend = {friend} rejectFriend = {rejectFriend} pendOrReq = {'Pending'}/>\r\n                                                })\r\n                                            }\r\n                                        </ul>\r\n        \r\n                                    </div>\r\n                                    :<></>\r\n                                }\r\n                        \r\n                            </div>\r\n                          \r\n          \r\n    </div>\r\n    </div>\r\n    </div></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Friends;","export default __webpack_public_path__ + \"static/media/friend.f4b364da.png\";","import React, {useState}from 'react';\r\nimport './Navigation.css';\r\n// import '../../colors.css';\r\n\r\n// import '../../colors3.css';\r\nimport '../../colors2.css';\r\nimport Hamburger from \"../../images/hamburger.png\";\r\nimport Home from \"../../images/home.png\";\r\nimport Friends from '../Friends/Friends';\r\nimport friendpicture from \"../../images/friend.png\";\r\n\r\nconst Navigation = ({onRouteChange, isSignedIn,route,\r\n    user, \r\n    setUser , \r\n    setRoute , \r\n    setPrivateMessage,\r\n    setConversation,\r\n    conversation,\r\n    addFriend,\r\n    publicStatus,\r\n    setPublicStatus,\r\n    changePublicStatus,\r\n    privateMessages\r\n})=>{\r\n    let display;\r\n    const [hideStatus,setHideStatus] = useState('Hidden')\r\n\r\n    const hide = ()=>{\r\n        hideStatus==='Hidden'?setHideStatus(''):setHideStatus('Hidden')\r\n        // console.log(hideStatus)\r\n    }\r\n    if (isSignedIn){\r\n        return (\r\n            <div className = \"navroot\">\r\n                <div className = \"title\">Halpin Messaging App</div>\r\n                <div><button className = \"hideButton\" onClick = {hide}><img src = {Hamburger} alt = \"=\" width=\"15rem\"></img></button>\r\n                    </div>\r\n                <div className = {'mainNav'+hideStatus}> \r\n                    <button className = \"wideButton\" onClick = {hide}>Close</button>\r\n                        <div className = \"groupContainer\">\r\n                            <p className = \"groupChat\">Group Chats</p>\r\n                            <div className = \"navButtonContainer \" >\r\n                                <p onClick = {()=>changePublicStatus('home',true)} className = {\"navButtons home\"+ route}>Public</p><p className = {\"navButtons friend\"+ route} onClick = {()=>changePublicStatus('friend',false)}>Friends</p>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                        <div>\r\n                            <p className = {\"navButtons mail\"+ route} onClick = {() => onRouteChange('mail')}>Private Message\r\n                            {/* {privateMessages.length?<span className = \"requests\">{privateMessages.length}</span>:<></>} */}\r\n                            </p>\r\n                        </div>\r\n                       \r\n                        <div className = \"\">\r\n                            <p className = {\"navButtons friends\"+ route} onClick = {()=>onRouteChange('friends')}>Contacts{user?.requests?.length?<span className = \"requests\">{user.requests.length}</span>:<></>}</p>\r\n                        </div>\r\n                        <nav className = \"\">\r\n                        <p onClick = {() => onRouteChange('Sign In')} className = {\"navButtons \"}>Sign Out</p>\r\n                    </nav>\r\n                    </div>\r\n                \r\n            </div>            \r\n        )\r\n    }else {\r\n        return (\r\n            <div >\r\n            </div>            \r\n            )   \r\n        }\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport './Picture.css';\r\n// width = \"200rem\"\r\nconst Picture = (source) => {\r\n    // console.log(source)\r\n    return (\r\n        <div >\r\n            <img className = \"picture\" alt = \"picture\" src = {source.source} ></img>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Picture;","export default __webpack_public_path__ + \"static/media/like.1fe2cbbc.png\";","export default __webpack_public_path__ + \"static/media/liked.82a0b8ca.png\";","import React from 'react';\r\nimport \"./Message.css\";\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\n// import '../../colors3.css';\r\nimport Picture from './Picture';\r\nimport Like from '../../images/like.png';\r\nimport Liked from '../../images/liked.png';\r\n\r\nconst Messagebox = ({ route,text, email, time, i, deletePost,deleteMail, addLike, currentUser,currentId,filteredMessages,background,publicStatus,pastPublicMessages,addFriend,likes}) => {\r\n   \r\n    return (\r\n        <div className = \"box\">\r\n            <div className = \"smallbox\">\r\n               <div className = {\"messageArea \" +background}>\r\n                    <div className = \"text\">\r\n                        <div className = \"textmessage\">{text.includes('#img#')? <Picture source = {text.substr(5,text.length-1)}/>:text}</div>\r\n                        \r\n                    </div>\r\n                    \r\n                   \r\n                    \r\n                </div>\r\n                \r\n                <div className = {\"user \" + background}>                    \r\n                    <p onClick={()=>addFriend(email)}>{email.toUpperCase().substr(0,email.indexOf('@'))}</p>\r\n                    <p className='date'>{time.substr(0,16)}</p>\r\n                </div>\r\n                {/* {console.log(likes.includes(currentUser),likes[0],currentUser)} */}\r\n                <div className={\"likes \"}>\r\n                        {route === 'home'||route==='friend'\r\n                            ?<button className = \"likeButton\" onClick = {()=>addLike(i,currentId)}>\r\n                                {likes?JSON.stringify(likes).includes(currentUser)\r\n                                    ?<img src = {Liked} alt=\"Unlike\" width=\"20rem\"></img>\r\n                                    :<img src = {Like} alt=\"like\" width = \"20rem\"></img>:<img src = {Like} alt=\"like\" width = \"20rem\"></img>}\r\n                            </button>\r\n                            \r\n                            :<></>}\r\n                    <div className = \"likedelete\">                    \r\n                        {route === 'home'||route==='friend'\r\n                            ?likes\r\n                                ?(<div className = \"liketext\">\r\n                                    {likes.length>=4\r\n                                        ?`${likes.length} Likes`\r\n                                        :(likes.length>1\r\n                                            ?(likes.length>2\r\n                                                ?JSON.parse(likes[0]).name+', '+JSON.parse(likes[1]).name+', and '+JSON.parse(likes[2]).name+' like this post'\r\n                                                :JSON.parse(likes[0]).name+' and '+JSON.parse(likes[1]).name+' like this post')\r\n                                            :(likes.length?JSON.parse(likes).name+' likes this post':''))}\r\n                                </div>\r\n                                 ):<></>\r\n                            :<></>\r\n                        }\r\n                        <div className = \"deleteContainer\">\r\n                            {route === \"home\"||route==='friend'\r\n                                ?<div>{filteredMessages[i].email===currentUser\r\n                                    ?<div className = \"deleteBackground\">\r\n                                        <button className = \"deleteButton\" id = {i} onClick = {()=>deletePost(i,publicStatus,currentId)}>x</button>\r\n                                    </div>\r\n                                    :<></>}\r\n                                </div>                        \r\n                                :<div className = \"deleteBackground\">\r\n                                    <button className = \"deleteButton\" id = {i} onClick = {()=>deleteMail(currentId)}>X</button>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Messagebox;","import React, { useState,useEffect } from 'react';\r\nimport Messagebox from './Messagebox';\r\nimport './Message.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\n// import '../../colors3.css';\r\n\r\n\r\n\r\n \r\n\r\nconst Messages = ({user, currentMessage,pastMessages,setPastMessages,setCurrentMessage,currentPublicMessage,pastPublicMessages,setPastPublicMessages,setCurrentPublicMessage,deletePost,route, addFriend, conversation,setFilteredMessages,filteredMessages,publicStatus,setPublicStatus}) => {\r\n    \r\n    \r\n    const [hiddenStatus,setHiddenStatus] = useState({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\",position:' middle'})\r\n    let offset = '';\r\n    let background = '';\r\n\r\n    useEffect(()=>{\r\n\r\n        const currentTime = currentMessage.time\r\n        \r\n        if (currentMessage.message!==''){\r\n        //     fetch('http://localhost:3005/friendmessage',{\r\n        //         method:'post',\r\n        //         headers:{'Content-Type':'application/json'},\r\n        //         body:JSON.stringify({\r\n        //             name:user.name,\r\n        //             email:user.email.toUpperCase(),\r\n        //             message:currentMessage.message,\r\n        //             time:'currentTime',\r\n        //             likes:[]\r\n        //             })\r\n        //         })\r\n        //         .then(res=>res.json())\r\n        //         .then(res=>{\r\n        //             setPastMessages(res)})\r\n        //         .catch(err=>console.log(err))\r\n\r\n        // setCurrentMessage((prevCurrentMessage)=>{\r\n        //     return {...prevCurrentMessage,message:''}\r\n        // })\r\n        // console.log('hello',user)\r\n        socket.emit('friendmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentMessage.message,\r\n                        time:'currentTime',\r\n                        likes:[]\r\n                        })\r\n                        setCurrentMessage((prevCurrentMessage)=>{\r\n                                return {...prevCurrentMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentMessage.time])\r\n\r\n    useEffect(()=>{\r\n        const currentTime = currentPublicMessage.time\r\n        \r\n        if (currentPublicMessage.message!==''){\r\n            // fetch('http://localhost:3005/publicmessage',{\r\n            //     method:'post',\r\n            //     headers:{'Content-Type':'application/json'},\r\n            //     body:JSON.stringify({\r\n            //         name:user.name,\r\n            //         email:user.email.toUpperCase(),\r\n            //         message:currentPublicMessage.message,\r\n            //         time:currentTime,\r\n            //         likes:[]\r\n            //         })\r\n            //     })\r\n            //     .then(res=>res.json())\r\n            //     .then(res=>{\r\n            //         setPastPublicMessages(res)})\r\n            //     .catch(err=>console.log(err))\r\n            // setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n            //     return {...prevCurrentPublicMessage,message:''}\r\n            // })\r\n            socket.emit('publicmessage',{\r\n                        name:user.name,\r\n                        email:user.email.toUpperCase(),\r\n                        message:currentPublicMessage.message,\r\n                        time:currentTime,\r\n                        likes:[]\r\n                        })\r\n                        setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                                return {...prevCurrentPublicMessage,message:''}\r\n                            })\r\n        }        \r\n    },[currentPublicMessage.time])\r\n\r\n\r\n    useEffect(()=>{\r\n        if (user.friends){\r\n            // console.log('here')\r\n        setFilteredMessages(()=>{\r\n            return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))\r\n        })          \r\n        console.log(filteredMessages)      \r\n        }\r\n    },[user.friends,pastMessages])\r\n\r\n   \r\n    const onSubmit = (picture) => {\r\n        if (picture && (currentPublicMessage.message!==\"\" || currentMessage.message !==\"\")){\r\n            publicStatus?\r\n                setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                    return {...prevCurrentPublicMessage,message:\"#img#\"+currentPublicMessage.message}\r\n                })\r\n                :\r\n                setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:\"#img#\"+currentMessage.message}\r\n            })\r\n        }\r\n        publicStatus?\r\n        setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n            return {...prevCurrentPublicMessage,time:Date().toLocaleString()}\r\n        })\r\n        :\r\n        setCurrentMessage((prevCurrentMessage)=>{\r\n            return {...prevCurrentMessage,time:Date().toLocaleString()}\r\n        })       \r\n        setHiddenStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\",position:' middle'})          \r\n    }\r\n\r\n    const onInputChange = (event) => {       \r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:event.target.value}\r\n            })\r\n            :setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:event.target.value}\r\n            })            \r\n    }\r\n    \r\n    const checkLiked = (like) =>{\r\n        console.log(like,user.email)\r\n        return JSON.parse(like).email!==user.email.toUpperCase()\r\n        // for (let like in user.likes){\r\n        //    if (JSON.parse(user.likes[like]).email===user.email){\r\n        //        console.log(true)\r\n        //    }\r\n        // }\r\n    }\r\n\r\n    const addLike = (i,currentId) => {\r\n        let contains=true\r\n        \r\n        // console.log('pushed',i,currentId,pastPublicMessages[i].likes[0])\r\n        if (publicStatus){\r\n            const newArr = [...pastPublicMessages]   \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            console.log(contains)\r\n            // const contains =34true\r\n            if (!newArr[i].likes,contains ){\r\n            \r\n\r\n\r\n                // fetch('http://localhost:3005/likes',{\r\n                //     method:'post',\r\n                //     headers:{'Content-Type':'application/json'},\r\n                //     body:JSON.stringify({\r\n                //         name:user.name,\r\n                //         email:user.email,\r\n                //         id:currentId,\r\n                //         database:'publicmessages'\r\n                //         })\r\n                //     })\r\n                //     .then(res=>res.json())\r\n                //     .then(res=>{ \r\n                //         setPastPublicMessages(res)})\r\n                //     .catch(err=>console.log(err))\r\n                // console.log({\r\n                //     name:user.name,\r\n                //     email:user.email,\r\n                //     id:currentId,\r\n                //     database:'publicmessages'\r\n                //     })\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'publicmessages'\r\n                            })\r\n            \r\n            }else{\r\n                // fetch('http://localhost:3005/dislike',{\r\n                //     method:'post',\r\n                //     headers:{'Content-Type':'application/json'},\r\n                //     body:JSON.stringify({\r\n                //         name:user.name,\r\n                //         email:user.email,\r\n                //         id:currentId,\r\n                //         database:'publicmessages'\r\n                //         })\r\n                //     })\r\n                //     .then(res=>res.json())\r\n                //     .then(res=>{\r\n                //         setPastPublicMessages(res)})\r\n                //     .catch(err=>console.log(err))\r\n            socket.emit('dislike',{\r\n                        name:user.name,\r\n                        email:user.email,\r\n                        id:currentId,\r\n                        database:'publicmessages'\r\n                        })\r\n            \r\n            }\r\n        }else if (!publicStatus){\r\n            const newArr = [...filteredMessages]\r\n            \r\n            if (newArr[i].likes){\r\n                contains =  newArr[i].likes.every(checkLiked)\r\n            }\r\n            // console.log(user,contains,'here')\r\n            if (!newArr[i].likes || contains){\r\n                // fetch('http://localhost:3005/likes',{\r\n                //     method:'post',\r\n                //     headers:{'Content-Type':'application/json'},\r\n                //     body:JSON.stringify({\r\n                //         name:user.name,\r\n                //         email:user.email,\r\n                //         id:currentId,\r\n                //         database:'friendmessage'\r\n                //         })\r\n                //     })\r\n                //     .then(res=>res.json())\r\n                //     .then(res=>{\r\n                //         setPastMessages(res)})\r\n                //     .catch(err=>console.log(err))\r\n                socket.emit('likes',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n            }else{\r\n                // fetch('http://localhost:3005/dislike',{\r\n                //     method:'post',\r\n                //     headers:{'Content-Type':'application/json'},\r\n                //     body:JSON.stringify({\r\n                //         name:user.name,\r\n                //         email:user.email,\r\n                //         id:currentId,\r\n                //         database:'friendmessage'\r\n                //         })\r\n                //     })\r\n                //     .then(res=>res.json())\r\n                //     .then(res=>{\r\n                //         setPastMessages(res)})\r\n                //     .catch(err=>console.log(err))\r\n                socket.emit('dislike',{\r\n                            name:user.name,\r\n                            email:user.email,\r\n                            id:currentId,\r\n                            database:'friendmessage'\r\n                            })\r\n            }        \r\n        }\r\n}\r\n\r\n    \r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenStatus({picture:\"\",message:\"textareahide\",button:\"textareahide\",submit:\"\",position:' right'})\r\n        }else{\r\n            setHiddenStatus({picture:\"textareahide\",message:\"\",button:\"textareahide\",submit:\"\",position:' right'})\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\",position:' middle'})\r\n        publicStatus?\r\n            setCurrentPublicMessage((prevCurrentPublicMessage)=>{\r\n                return {...prevCurrentPublicMessage,message:''}\r\n            })\r\n            :setCurrentMessage((prevCurrentMessage)=>{\r\n                return {...prevCurrentMessage,message:''}\r\n            })\r\n    }\r\n\r\n    return(\r\n        <div className = \"maincomment\">                \r\n            {publicStatus?\r\n                <>            \r\n                    <div className = \"inputbox\">          \r\n                        <div>\r\n                            <input id = \"pic\" className = {\"textareapic public \"+hiddenStatus.picture} cols=\"40\" rows=\"6\" onChange = {onInputChange} placeholder = \"Enter Picture URL\" value = {currentPublicMessage.message} autoFocus></input>\r\n                            <textarea id=\"msg\" className = {\"textarea public \"+hiddenStatus.message}  onChange = {onInputChange} value = {currentPublicMessage.message} autoFocus></textarea>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className = \"publicButton\">\r\n                        <button className = \"disabledButtons\">Public</button><button className = \"publicButtons\" onClick = {changePublicStatus}>Friends</button>\r\n                    </div>             */}\r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">                \r\n                            <label className = {\"msg \"+hiddenStatus.submit} onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>Submit</label>\r\n                            <label className = {\"msg \"+hiddenStatus.submit} onClick = {goBack}>Back</label>                            \r\n                            <label htmlFor=\"msg\" className = {\"msg \"+hiddenStatus.button} onClick = {()=>changeHidden(false)}>Message</label>\r\n                            <label htmlFor =\"pic\" className = {\"msg \"+hiddenStatus.button} onClick = {()=>changeHidden(true)}>Picture</label>                            \r\n                        </div>\r\n            {/* {checkLiked()} */}\r\n                        <div className=\"bigbox\">\r\n                            {pastPublicMessages.map((msg,i)=>{\r\n                                const currentUser = pastPublicMessages.length - 1 -i\r\n                                const currentId = pastPublicMessages[currentUser].id   \r\n                                // const likeStatus = msg.likes.every(checkLiked())             \r\n                                return <div key = {i}>\r\n                                    <Messagebox \r\n                                        filteredMessages = {pastPublicMessages} \r\n                                        currentUser = {user.email} \r\n                                        email = {pastPublicMessages[currentUser].email} \r\n                                        text ={pastPublicMessages[currentUser].message} \r\n                                        time = {pastPublicMessages[currentUser].time} \r\n                                        i = {currentUser} \r\n                                        currentId = {currentId}\r\n                                        deletePost = {deletePost} \r\n                                        route={route} \r\n                                        addLike = {addLike} \r\n                                        likes = {pastPublicMessages[currentUser].likes} \r\n                                        publicStatus = {publicStatus}\r\n                                        addFriend = {addFriend}\r\n                                        // likeStatus = {likeStatus}\r\n                                    />\r\n                                </div>            \r\n                                })\r\n                            }\r\n                        </div>            \r\n                    </div>        \r\n                </>\r\n                :\r\n                <>\r\n                    <div className = \"inputbox\">\r\n                        <input \r\n                            id = \"friendpic\"\r\n                            className = {\"textareapic friend \"+hiddenStatus.picture}  \r\n                            onChange = {onInputChange} \r\n                            placeholder = \"Enter Picture URL\"\r\n                            value = {currentMessage.message}\r\n                        ></input>\r\n                        <textarea\r\n                            id = \"friendmsg\" \r\n                            className = {\"textarea friend \"+hiddenStatus.message} \r\n                            onChange = {onInputChange} \r\n                            value = {currentMessage.message}\r\n                        ></textarea>  \r\n                    </div>\r\n                    {/* <div className = \"publicButton\">\r\n                        <button className = \"publicButtons\" onClick = {changePublicStatus}>Public</button><button className = \"disabledButtons\">Friends</button>\r\n                    </div>             */}\r\n                    <div className=\"commentsection\">\r\n                        <div className = \"inputbox\">\r\n                            <label htmlFor =\"friendmsg\" className = {\"msg \"+hiddenStatus.button} onClick = {()=>changeHidden(false)}>Message</label>\r\n                            <label htmlFor = \"friendpic\" className = {\"msg \"+hiddenStatus.button} onClick = {()=>changeHidden(true)}>Picture</label>\r\n                            <label className = {\"msg \"+hiddenStatus.submit} onClick = {()=>onSubmit(hiddenStatus.picture===\"\")}>Submit</label>\r\n                            <label className = {\"msg \"+hiddenStatus.submit} onClick = {goBack}>Back</label>\r\n                        </div>                \r\n                        <div className=\"bigbox\">                    \r\n                            {filteredMessages.map((message,i)=>{    \r\n                                // console.log('here now',message)            \r\n                                const currentUser = filteredMessages.length -1-i\r\n                                const currentId = filteredMessages[currentUser].id                    \r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()?offset=\"sender\":offset=\"recipient\";\r\n                                filteredMessages[currentUser].email.toUpperCase()===user.email.toUpperCase()?background=\"senderbackground\":background=\"\";                                \r\n                                return <div key ={i} className = {offset}>\r\n                                            <Messagebox \r\n                                                filteredMessages = {filteredMessages} \r\n                                                currentUser = {user.email} \r\n                                                email = {filteredMessages[currentUser].email} \r\n                                                text ={filteredMessages[currentUser].message} \r\n                                                time = {filteredMessages[currentUser].time} \r\n                                                i = {currentUser} \r\n                                                currentId = {currentId}\r\n                                                deletePost = {deletePost} \r\n                                                route={route} \r\n                                                addLike = {addLike} \r\n                                                likes = {filteredMessages[currentUser].likes} \r\n                                                publicStatus = {publicStatus}\r\n                                                addFriend = {addFriend}\r\n                                                background = {background}\r\n                                            />\r\n                                        </div>\r\n                                })\r\n                            }\r\n                        </div>  \r\n                    </div>\r\n                </>\r\n            }            \r\n        </div>\r\n        )\r\n    }\r\n    \r\n\r\n\r\nexport default Messages;","import React, { useState, useEffect } from 'react';\r\nimport Messagebox from '../Messages/Messagebox';\r\nimport Friend from '../Friends/Friend';\r\nimport './Mail.css';\r\n// import '../../colors.css';\r\nimport '../../colors2.css';\r\nimport socket from '../../socket';\r\n// import '../../colors3.css';\r\n\r\nconst Mail = ({privateMessage, setPrivateMessage, privateMessages, setPrivateMessages, user,deletePost,conversation,setConversation,converse,route}) => {\r\n\r\n    const [hiddenMailStatus,setHiddenMailStatus] = useState({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n    let offset=''\r\n    let background=''\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        if (privateMessage.message!==''){\r\n            // fetch('http://localhost:3005/privatemessage',{\r\n            //     method:'post',\r\n            //     headers:{'Content-Type':'application/json'},\r\n            //     body:JSON.stringify({\r\n            //         name:user.username,\r\n            //         senderemail:user.email,\r\n            //         recipientemail:conversation.you,\r\n            //         message:privateMessage.message,\r\n            //         time:'currentTime'\r\n            //         })\r\n            //     })\r\n            //     .then(res=>res.json())\r\n            //     .then(res=>{\r\n            //         console.log('FROM DB',res)\r\n            //         setPrivateMessages(res)})\r\n            //     .catch(err=>console.log(err))\r\n            socket.emit('privatemessage',{\r\n                        name:user.name,\r\n                        senderemail:user.email,\r\n                        recipientemail:conversation.you,\r\n                        message:privateMessage.message,\r\n                        time:'currentTime'\r\n                        })\r\n            }\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,name:'',message:'',time:''}})  \r\n    },[privateMessage.time])\r\n\r\n\r\n    const onChanges= (event) =>{\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,message:event.target.value}\r\n            })\r\n        }\r\n      \r\n\r\n    const onSend = (picture) => {\r\n        if(picture &&(privateMessage.message!=='')){\r\n            setPrivateMessage((prevPrivateMessage)=>{\r\n                return {...prevPrivateMessage,message:'#img#'+privateMessage.message}\r\n            })\r\n          }\r\n        setPrivateMessage((prevPrivateMessage)=>{\r\n            return {...prevPrivateMessage,time:Date().toLocaleString()}\r\n        })\r\n          setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n      }\r\n\r\n    const deleteMail = (currentId) => {        \r\n        // fetch('http://localhost:3005/deletemail',{\r\n        //     method:'post',\r\n        //     headers:{'Content-Type':'application/json'},\r\n        //     body:JSON.stringify({\r\n        //         id:currentId,\r\n        //         database:'privatemessage'\r\n        //         })\r\n        //     })\r\n        //     .then(res=>res.json())\r\n        //     .then(res=>{\r\n        //         setPrivateMessages(res)})\r\n        //     .catch(err=>console.log(err))\r\n        socket.emit('deletemail',{\r\n                    id:currentId,\r\n                    database:'privatemessage'\r\n                    })\r\n      }\r\n\r\n    const changeHidden = (picture) => {\r\n        if(picture){\r\n           setHiddenMailStatus({picture:\"\",message:\"textareahide\",button:\"textareahide\",submit:\"\"})\r\n        }else{\r\n            setHiddenMailStatus({picture:\"textareahide\",message:\"\",button:\"textareahide\",submit:\"\"})\r\n        }        \r\n    }\r\n\r\n    const goBack = () => {\r\n        setHiddenMailStatus({picture:\"textareahide\",message:\"textareahide\",button:\"\",submit:\"textareahide\"})\r\n        \r\n        setPrivateMessage((prevCurrentPrivateMessage)=>{\r\n            return {...prevCurrentPrivateMessage,message:''}})        \r\n    }\r\n\r\n    const mainMailWindow = ()=>{\r\n        setConversation(prevConversation=>{\r\n            return {...prevConversation,you:''}\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className = \"mailbox\">\r\n            {conversation.you?\r\n            <div>\r\n                <div>        \r\n                    <input \r\n                        id = \"picture\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.picture} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        placeholder = \"Enter Picture URL\" \r\n                        value = {privateMessage.message}\r\n                    ></input>\r\n                    <textarea \r\n                        id = \"mail\"\r\n                        className = {\"mailtextarea \"+hiddenMailStatus.message} cols=\"40\" rows=\"6\" \r\n                        onChange = {onChanges} \r\n                        value = {privateMessage.message}\r\n                    ></textarea>\r\n                    <div className = \"mailButtons\">\r\n                    <label htmlFor = \"mail\" className = {\"buttons \"+hiddenMailStatus.button} onClick = {()=>changeHidden(false)}>Message</label>\r\n                    <label htmlFor = \"picture\" className = {\"buttons \"+hiddenMailStatus.button} onClick = {()=>changeHidden(true)}>Picture</label>\r\n                    <label className = {\"buttons \"+hiddenMailStatus.submit} onClick = {()=>onSend(hiddenMailStatus.picture===\"\")}>Submit</label>\r\n                    <label className = {\"buttons \"+hiddenMailStatus.submit} onClick = {goBack}>Back</label>\r\n                    </div>\r\n                    <div className = \"privateMessage\">\r\n                        <button className = \"backButton\" onClick = {mainMailWindow}>&lt;</button>\r\n                        <p className = \"contactName\">{conversation.you}</p>\r\n                    </div>    \r\n                </div>\r\n                <div className = \"messages\">               \r\n                {privateMessages.map((message,i)=>{\r\n                    const currentMessage = privateMessages.length-1-i\r\n                    const currentId = privateMessages[currentMessage].id\r\n                    if (((privateMessages[currentMessage].recipientemail.toUpperCase() === conversation.you\r\n                        &&privateMessages[currentMessage].senderemail.toUpperCase() === user.email)\r\n                            ||(privateMessages[currentMessage].senderemail.toUpperCase() ===conversation.you\r\n                            &&privateMessages[currentMessage].recipientemail.toUpperCase() === user.email)\r\n                            ))\r\n                            {    \r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()?offset=\"sender\":offset=\"recipient\";\r\n                                privateMessages[currentMessage].senderemail.toUpperCase()===user.email.toUpperCase()?background=\"senderbackground\":background=\"\";\r\n                                return <div className = {offset}>\r\n                                    {/* {console.log(privateMessage)} */}\r\n                                            <Messagebox email = {privateMessages[currentMessage].senderemail} \r\n                                            text ={privateMessages[currentMessage].message} \r\n                                            time = {privateMessages[currentMessage].time} \r\n                                            i = {i}\r\n                                            deleteMail = {deleteMail} \r\n                                             currentId = {currentId}\r\n                                            background = {background} \r\n                                            />\r\n                                        </div>\r\n                            }\r\n                    \r\n                    })\r\n                }\r\n            </div> \r\n            </div>\r\n                :\r\n                <div className = 'nocontactContainer'>\r\n                    \r\n                    <p className = \"contactName\">Select a contact to message</p>\r\n                                            <ul className = \"contactScroll\">                            \r\n                                                {user.friends.map((friend)=>{\r\n                                                    return <div>\r\n                                                        <Friend converse = {converse} friend = {friend} route={route} />\r\n                                                        \r\n                                                        </div>\r\n                                                    })\r\n                                                }\r\n                                             </ul>\r\n    \r\n                                        \r\n                    \r\n                </div>\r\n            }\r\n                       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mail;","import React, { useState, useEffect } from 'react';\r\nimport Login from './component/Login/Login';\r\nimport Navigation from './component/Navigation/Navigation';\r\nimport Messages from './component/Messages/Messages';\r\nimport Mail from './component/Mail/Mail';\r\nimport Friends from './component/Friends/Friends';\r\nimport socket from './socket'\r\nimport './App.css';\r\n\r\n// import './colors.css';\r\nimport './colors2.css';\r\n// import './colors3.css';\r\nimport Picture from './component/Messages/Picture';\r\n\r\n// https://socially-distanced-server.herokuapp.com/\r\n\r\n\r\nfunction App() {\r\n  const [user,setUser] = useState({name:'',email:'',friends:[],request:[],pendingrequests:[]})\r\n  const [password,setPassword] = useState('')\r\n  const [route,setRoute] = useState('Sign In')\r\n  const [isSignedIn,setIsSignedIn] = useState(false)\r\n  const [errorMessage,setErrorMessage] = useState('')\r\n  const [pastMessages,setPastMessages] = useState([])\r\n  const [currentMessage, setCurrentMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [pastPublicMessages,setPastPublicMessages] = useState([])\r\n  const [currentPublicMessage, setCurrentPublicMessage] = useState({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n  const [privateMessages,setPrivateMessages] = useState([])\r\n  const [privateMessage, setPrivateMessage] = useState({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n  const [conversation,setConversation] = useState({me:'',you:''})\r\n  const [filteredMessages,setFilteredMessages] = useState({})\r\n  const [publicStatus,setPublicStatus] = useState(true);\r\n  \r\n  useEffect(()=>{\r\n    socket.on('friendrequest',data=>{\r\n      console.log(data[0],user.email)\r\n      if (data[0].email===user.email){\r\n        setUser(data[0])\r\n        console.log('request',user)\r\n      }\r\n      return ()=>{\r\n\r\n        socket.off('friendrequest')\r\n      }\r\n    })\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    socket.on('unfriend',data=>{\r\n      // fetch('https://socially-distanced-server.herokuapp.com/update',{\r\n      //           method:'post',\r\n      //           headers:{'Content-Type':'application/json'},\r\n      //           body:JSON.stringify({\r\n      //             email:user.email\r\n      //           })\r\n      //         })\r\n      //       .then(res=>res.json())\r\n      //       .then(res=>{\r\n      //           if (res.email===user.email){\r\n      //             setUser(res)}})\r\n      //             .catch(err=>console.log(err))\r\n      console.log(data,user)\r\n      if (data[0].email===user.email){\r\n        setUser(data[0])\r\n      }\r\n      // socket.emit('update',{email:user.email})\r\n    })\r\n    return ()=>{\r\n      socket.off('unfriend')\r\n    }\r\n  },[])\r\n  \r\n  useEffect(()=>{\r\n    socket.on('reject',data=>{\r\n      console.log(data[0],user)\r\n      if (data[0].email===user.email){\r\n        console.log('setting user',data[0])\r\n        setUser(data[0])\r\n      }\r\n    })\r\n    return ()=>{\r\n      socket.off('reject')\r\n    }\r\n  },[])\r\n\r\n  useEffect(()=>{\r\n    socket.on('acceptfriend',data=>{\r\n      console.log('accept',data,user)\r\n      if (data[0].email===user.email){\r\n        setUser(data[0])\r\n      }})\r\n      return ()=>{\r\n        socket.off('acceptfriend')\r\n      }\r\n  },[])\r\n\r\n\r\n  socket.on('privatemessage',(data)=>{\r\n    setPrivateMessages(data)\r\n  })\r\n  socket.on('publicmessage',(data)=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('friendmessage',(data)=>{\r\n  // console.log('here',data)\r\n  setPastMessages(data)\r\n})\r\nsocket.on('publiclikes',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('friendlikes',data=>{\r\n  setPastMessages(data)\r\n})\r\n// socket.on('friends',data=>{\r\n//     friends.addFriends(data,db,io)\r\n// })\r\nsocket.on('publicdislike',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('frienddislike',data=>{\r\n  setPastMessages(data)\r\n})\r\nsocket.on('publicdeletemessage',data=>{\r\n    setPastPublicMessages(data)\r\n})\r\nsocket.on('frienddeletemessage',data=>{\r\n    setPastMessages(data)\r\n})\r\nsocket.on('deletemail',data=>{\r\n    setPrivateMessages(data)\r\n})\r\n\r\n  // fetch('https://socially-distanced-server.herokuapp.com/update',{\r\n  //           method:'post',\r\n  //           headers:{'Content-Type':'application/json'},\r\n  //           body:JSON.stringify({\r\n  //             email:user.email\r\n  //           })\r\n  //         })\r\n  //       .then(res=>res.json())\r\n  //       .then(res=>{\r\n  //           if (res.email===user.email){\r\n  //             setUser(res)\r\n              // socket.emit('update',{email:user.email})\r\n              // .catch(err=>console.log(err))\r\n\r\n\r\n\r\n  // fetch('https://socially-distanced-server.herokuapp.com/update',{\r\n  //           method:'post',\r\n  //           headers:{'Content-Type':'application/json'},\r\n  //           body:JSON.stringify({\r\n  //             email:user.email\r\n  //           })\r\n  //         })\r\n  //       .then(res=>res.json())\r\n  //       .then(res=>{\r\n  //           if (res.email===user.email){\r\n  //             setUser(res)}})\r\n  //             .catch(err=>console.log(err))\r\n    // reject.rejectFriend(data,db,io)\r\n\r\n\r\n  // fetch('https://socially-distanced-server.herokuapp.com/update',{\r\n  //           method:'post',\r\n  //           headers:{'Content-Type':'application/json'},\r\n  //           body:JSON.stringify({\r\n  //             email:user.email\r\n  //           })\r\n  //         })\r\n  //       .then(res=>res.json())\r\n  //       .then(res=>{\r\n  //           if (res.email===user.email){\r\n  //             setUser(res)}})\r\n  //             .catch(err=>console.log(err))\r\n    // acceptfriend.addFriend(data,db,io)\r\n\r\n// socket.on('update',data=>{\r\n//   console.log(data)\r\n//   if (data[0].email===user.email){\r\n//     setUser(data)\r\n//   }\r\n  // data.map((current)=>{\r\n  //   if (current.email===user.email){\r\n  //     setUser(current)\r\n  //   }\r\n  // })\r\n  // console.log('here')\r\n  // setUser(data[0])\r\n// })\r\n\r\n\r\n  useEffect (()=>{\r\n    if (user.friends){\r\n      setFilteredMessages(()=>{\r\n        return pastMessages.filter((message)=>message.email===user.email||user.friends.includes(message.email))})\r\n    } \r\n  },[])\r\n \r\n  const resetState = () => {\r\n    // console.log(user)\r\n    setRoute('Sign In')\r\n    setIsSignedIn(false)\r\n    setUser({name:'',email:'',friends:[],requests:[],pendingrequests:[]})\r\n    setCurrentMessage({id:'',name:'',email:'',message:'',time:'',likes:[]})\r\n    setPrivateMessage({id:'',name:'',senderemail:'',recipientemail:'',message:'',time:''})\r\n    setConversation({me:'',you:''})\r\n    setPublicStatus(true)\r\n    setErrorMessage('')\r\n    setPassword('')\r\n  }\r\n\r\n  const onRouteChange = (route) => {\r\n    (route === 'home' || route ==='mail' || route ==='friends' || route===\"friend\" )?setIsSignedIn(true):resetState();\r\n    setRoute(route)\r\n  }\r\n  \r\n\r\n  const loadData = (location,info,infoUpdate) =>{\r\n    fetch(`https://socially-distanced-server.herokuapp.com/${location}`,{\r\n          method:'post',\r\n          headers:{'Content-Type':'application/json'},\r\n          body:info\r\n          })\r\n          .then(res=>res.json())\r\n          .then(res=>{\r\n              infoUpdate(res)})\r\n          .catch(err=>console.log(err))\r\n          // socket.emit(location,info)\r\n  }\r\n\r\n\r\n  const deletePost = (currentIndex,publicStatus,currentId) => {\r\n    if (publicStatus){\r\n      // fetch('https://socially-distanced-server.herokuapp.com/deletemessage',{\r\n      //     method:'post',\r\n      //     headers:{'Content-Type':'application/json'},\r\n      //     body:JSON.stringify({\r\n      //         id:currentId,\r\n      //         database:'publicmessages'\r\n      //         })\r\n      //     })\r\n      //     .then(res=>res.json())\r\n      //     .then(res=>{\r\n      //         // console.log('FROM DB',res)\r\n      //         setPastPublicMessages(res)})\r\n      //     .catch(err=>console.log(err))\r\n      socket.emit('deletemessage',{\r\n                id:currentId,\r\n                database:'publicmessages'\r\n                })\r\n    }else{\r\n      // fetch('https://socially-distanced-server.herokuapp.com/deletemessage',{\r\n      //     method:'post',\r\n      //     headers:{'Content-Type':'application/json'},\r\n      //     body:JSON.stringify({\r\n      //       id:currentId,\r\n      //       database:'friendmessage'\r\n      //         })\r\n      //     })\r\n      //     .then(res=>res.json())\r\n      //     .then(res=>{\r\n      //         // console.log('FROM DB',res)\r\n      //         setPastMessages(res)})\r\n      //     .catch(err=>console.log(err))\r\n      //     }      \r\n      socket.emit('deletemessage',{\r\n        id:currentId,\r\n        database:'friendmessage'\r\n        })\r\n  }}\r\n\r\n  const addFriend = (newFriend) => {\r\n    console.log('friend',user)\r\n    if (newFriend===\"No Names\"){\r\n      newFriend = prompt('Enter the email address of your friend ')\r\n    }\r\n    console.log(user.email)\r\n    if (newFriend){\r\n        if (!user.friends||!user.friends.includes(newFriend)||!user.pendingrequests.includes(newFriend)||!user.request.includes(newFriend)){\r\n          fetch('https://socially-distanced-server.herokuapp.com/friendrequest',{\r\n              method:'post',\r\n              headers:{'Content-Type':'application/json'},\r\n              body:JSON.stringify({\r\n                  email:user.email,\r\n                  newFriend:newFriend.toUpperCase()\r\n                  })\r\n              })\r\n              .then(res=>res.json())\r\n              .then(res=>{    \r\n                \r\n                alert(`Friend request sent to ${newFriend.toUpperCase()}.`)\r\n                console.log(res)                \r\n                  // if (res){\r\n                  //   setUser((prevUser)=> {\r\n                  //     return {...prevUser,pendingrequests:res.pendingrequests}})\r\n                  \r\n            }).catch(err=>console.log(err))\r\n            // console.log(user)\r\n            // socket.emit('friendrequest',{\r\n            //   email:user.email,\r\n            //   newFriend:newFriend.toUpperCase()\r\n            //   })\r\n          }\r\n    }\r\n   \r\n  }\r\n\r\n  \r\n  const changePublicStatus = (route,publicState) => {\r\n    // console.log(route,publicState)\r\n    setPublicStatus(publicState)\r\n    onRouteChange(route)\r\n    \r\n}\r\n\r\nconst converse = (friend) => {\r\n  // toggleFriends()\r\n  setConversation((prevConversation)=>{\r\n      return {...prevConversation,you:friend}\r\n  })\r\n  setPrivateMessage((prevPrivateMessage)=>{\r\n      return {...prevPrivateMessage,recipientEmail:friend}\r\n  })\r\n  setRoute('mail')\r\n}\r\n       \r\n \r\n\r\n  return (\r\n    <div className=\"App\">      \r\n        <Navigation \r\n            onRouteChange = {onRouteChange} \r\n            isSignedIn = {isSignedIn}\r\n            route={route}\r\n            user = {user} \r\n            setUser = {setUser} \r\n            route = {route} \r\n            setRoute = {setRoute} \r\n            setPrivateMessage = {setPrivateMessage} \r\n            setConversation = {setConversation}\r\n            conversation = {conversation} \r\n            addFriend = {addFriend}\r\n            publicStatus = {publicStatus}\r\n            setPublicStatus = {setPublicStatus}\r\n            changePublicStatus = {changePublicStatus}\r\n            privateMessages = {privateMessages}\r\n        />\r\n    \r\n        {isSignedIn\r\n            ? (route==='home'||route==='friend'\r\n                  ?<div className = \"main\">\r\n                        <div className = \"mainMessage\">\r\n                            <Messages \r\n                                user = {user} \r\n                                loadData = {loadData}\r\n                                // setCurrentMessage = {setCurrentMessage} \r\n                                // setPastMessages = {setPastMessages} \r\n                                route = {route}\r\n                                deletePost = {deletePost}\r\n                                currentMessage = {currentMessage}\r\n                                setCurrentMessage = {setCurrentMessage}\r\n                                pastMessages = {pastMessages}\r\n                                setPastMessages = {setPastMessages}\r\n                                currentPublicMessage = {currentPublicMessage}\r\n                                setCurrentPublicMessage = {setCurrentPublicMessage}\r\n                                pastPublicMessages = {pastPublicMessages}\r\n                                setPastPublicMessages = {setPastPublicMessages}\r\n                                addFriend = {addFriend}\r\n                                conversation = {conversation}\r\n                                setFilteredMessages = {setFilteredMessages}\r\n                                filteredMessages = {filteredMessages}\r\n                                publicStatus = {publicStatus}\r\n                                setPublicStatus = {setPublicStatus}\r\n                              />\r\n                        </div>\r\n                  </div>\r\n                  :route==='mail'?\r\n                  <div className = \"main\">\r\n                      <div className = \"mainMessage\">\r\n                          <Mail \r\n                              user ={user} \r\n                              privateMessage = {privateMessage} \r\n                              setPrivateMessage = {setPrivateMessage} \r\n                              privateMessages = {privateMessages} \r\n                              setPrivateMessages = {setPrivateMessages} \r\n                              deletePost = {deletePost} \r\n                              conversation = {conversation}\r\n                              loadData = {loadData} \r\n                              setConversation = {setConversation}\r\n                              converse = {converse}\r\n                              route = {route}\r\n                            /> \r\n                      </div>\r\n                  </div>\r\n                  :\r\n                  \r\n                        <Friends \r\n                            user = {user} \r\n                            setUser = {setUser} \r\n                            route = {route} \r\n                            setRoute = {setRoute} \r\n                            setPrivateMessage = {setPrivateMessage} \r\n                            setConversation = {setConversation} \r\n                            addFriend = {addFriend}\r\n                            onRouteChange = {onRouteChange} \r\n                            converse = {converse}\r\n                            // display={display}\r\n                            \r\n                        />\r\n                  )\r\n        \r\n            :(<>\r\n                <Login \r\n                    user = {user}\r\n                    route = {route} \r\n                    errorMessage = {errorMessage}\r\n                    setUser = {setUser}\r\n                    setRoute = {setRoute}\r\n                    setErrorMessage = {setErrorMessage}\r\n                    setIsSignedIn = {setIsSignedIn}\r\n                    onRouteChange = {onRouteChange}            \r\n                    setCurrentMessage = {setCurrentMessage}\r\n                    pastMessages = {pastMessages}\r\n                    setPrivateMessages = {setPrivateMessages}\r\n                    setPastMessages = {setPastMessages}\r\n                    setCurrentPublicMessage = {setCurrentPublicMessage}\r\n                    setPastPublicMessages = {setPastPublicMessages}\r\n                    setConversation = {setConversation}\r\n                    setFilteredMessages = {setFilteredMessages}\r\n                    loadData = {loadData}\r\n                    password = {password}\r\n                    setPassword = {setPassword}\r\n                    \r\n                  \r\n                    />          \r\n                </>\r\n              )\r\n        }\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import './colors.css';\r\nimport './colors2.css';\r\n// import './colors3.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}